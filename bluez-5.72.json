{"Version":"5.72","Api":[{"FileName":"health-api.txt","Name":"BlueZ D-Bus Health API description","Description":"\n","Api":[{"Title":"HealthManager hierarchy","Description":"","Service":"org.bluez","Interface":"org.bluez.HealthManager1","ObjectPath":"/org/bluez/","Methods":[{"Name":"CreateApplication","ReturnType":"object","Args":[{"Type":"dict","Name":"config"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tReturns the path of the new registered application.\n\t\t\tApplication will be closed by the call or implicitly\n\t\t\twhen the programs leaves the bus.\n\t\t\tconfig:\n\t\t\t\tuint16 DataType:\n\t\t\t\t\tMandatory\n\t\t\t\tstring Role:\n\t\t\t\t\tMandatory. Possible values: \"source\",\n\t\t\t\t\t\t\t\t\t\"sink\"\n\t\t\t\tstring Description:\n\t\t\t\t\tOptional\n\t\t\t\tChannelType:\n\t\t\t\t\tOptional, just for sources. Possible\n\t\t\t\t\tvalues: \"reliable\", \"streaming\"\n\t\t\tPossible Errors: org.bluez.Error.InvalidArguments\n"},{"Name":"DestroyApplication","ReturnType":"void","Args":[{"Type":"object","Name":"application"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tCloses the HDP application identified by the object\n\t\t\tpath. Also application will be closed if the process\n\t\t\tthat started it leaves the bus. Only the creator of the\n\t\t\tapplication will be able to destroy it.\n\t\t\tPossible errors: org.bluez.Error.InvalidArguments\n\t\t\t\t\t org.bluez.Error.NotFound\n\t\t\t\t\t org.bluez.Error.NotAllowed\n"}],"Signals":[],"Properties":[]},{"Title":"HealthDevice hierarchy","Description":"","Service":"org.bluez","Interface":"org.bluez.HealthDevice1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[{"Name":"Echo","ReturnType":"boolean","Args":[],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tSends an echo petition to the remote service. Returns\n\t\t\tTrue if response matches with the buffer sent. If some\n\t\t\terror is detected False value is returned.\n\t\t\tPossible errors: org.bluez.Error.InvalidArguments\n\t\t\t\t\t org.bluez.Error.OutOfRange\n"},{"Name":"CreateChannel","ReturnType":"object","Args":[{"Type":"object","Name":"application"},{"Type":"string","Name":"configuration"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tCreates a new data channel.  The configuration should\n\t\t\tindicate the channel quality of service using one of\n\t\t\tthis values \"reliable\", \"streaming\", \"any\".\n\t\t\tReturns the object path that identifies the data\n\t\t\tchannel that is already connected.\n\t\t\tPossible errors: org.bluez.Error.InvalidArguments\n\t\t\t\t\t org.bluez.Error.HealthError\n"},{"Name":"DestroyChannel","ReturnType":"void","Args":[{"Type":"object","Name":"channel"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tDestroys the data channel object. Only the creator of\n\t\t\tthe channel or the creator of the HealthApplication\n\t\t\tthat received the data channel will be able to destroy\n\t\t\tit.\n\t\t\tPossible errors: org.bluez.Error.InvalidArguments\n\t\t\t\t\t org.bluez.Error.NotFound\n\t\t\t\t         org.bluez.Error.NotAllowed\n"}],"Signals":[{"Name":"ChannelConnected","ReturnType":"void","Args":[{"Type":"object","Name":"channel"}],"Errors":null,"Docs":"\n\t\t\tThis signal is launched when a new data channel is\n\t\t\tcreated or when a known data channel is reconnected.\n\n"},{"Name":"ChannelDeleted","ReturnType":"void","Args":[{"Type":"object","Name":"channel"}],"Errors":null,"Docs":"\n\t\t\tThis signal is launched when a data channel is deleted.\n\n\t\t\tAfter this signal the data channel path will not be\n\t\t\tvalid and its path can be reused for future data\n\t\t\tchannels."}],"Properties":[{"Name":"MainChannel","Type":"object","Docs":"The first reliable channel opened. It is needed by\n\t\t\tupper applications in order to send specific protocol\n\t\t\tdata units. The first reliable can change after a\n\t\t\treconnection.","Flags":[]}]},{"Title":"HealthChannel hierarchy","Description":"","Service":"org.bluez","Interface":"org.bluez.HealthChannel1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/chanZZZ","Methods":[{"Name":"Acquire","ReturnType":"fd","Args":[],"Errors":["org.bluez.Error.NotConnected","org.bluez.Error.NotConnected"],"Docs":"\t\t\tReturns the file descriptor for this data channel. If\n\t\t\tthe data channel is not connected it will also\n\t\t\treconnect.\n\t\t\tPossible Errors: org.bluez.Error.NotConnected\n\t\t\t\t\t org.bluez.Error.NotAllowed\n"},{"Name":"Release","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.NotAcquired","org.bluez.Error.NotAcquired"],"Docs":"\t\t\tReleases the fd. Application should also need to\n\t\t\tclose() it.\n\t\t\tPossible Errors: org.bluez.Error.NotAcquired\n\t\t\t\t\t org.bluez.Error.NotAllowed\n"}],"Signals":[],"Properties":[{"Name":"Type","Type":"string","Docs":"The quality of service of the data channel. (\"reliable\"\n\t\t\tor \"streaming\")","Flags":[]},{"Name":"Device","Type":"object","Docs":"Identifies the Remote Device that is connected with.\n\t\t\tMaps with a HealthDevice object.","Flags":[]},{"Name":"Application","Type":"object","Docs":"Identifies the HealthApplication to which this channel\n\t\t\tis related to (which indirectly defines its role and\n\t\t\tdata type).","Flags":[]}]}]},{"FileName":"mesh-api.txt","Name":"BlueZ D-Bus Mesh API description","Description":"","Api":[{"Title":"Mesh Network Hierarchy","Description":"","Service":"org.bluez.mesh","Interface":"org.bluez.mesh.Network1","ObjectPath":"/org/bluez/mesh","Methods":[{"Name":"Join","ReturnType":"void","Args":[{"Type":"object","Name":"app_root"},{"Type":"array{byte}[16]","Name":"uuid"}],"Errors":null,"Docs":"\t\tThis is the first method that an application has to call to\n\t\tbecome a provisioned node on a mesh network. The call will\n\t\tinitiate broadcasting of Unprovisioned Device Beacon.\n\t\tThe app_root parameter is a D-Bus object root path of\n\t\tthe application that implements org.bluez.mesh.Application1\n\t\tinterface. The application represents a node where child mesh\n\t\telements have their own objects that implement\n\t\torg.bluez.mesh.Element1 interface. The application hierarchy\n\t\talso contains a provision agent object that implements\n\t\torg.bluez.mesh.ProvisionAgent1 interface. The standard\n\t\tDBus.ObjectManager interface must be available on the\n\t\tapp_root path.\n\t\tThe uuid parameter is a 16-byte array that contains Device UUID.\n\t\tThis UUID must be unique (at least from the daemon perspective),\n\t\ttherefore attempting to call this function using already\n\t\tregistered UUID results in an error. The composition of the UUID\n\t\toctets must be in compliance with RFC 4122.\n\t\tWhen provisioning finishes, the daemon will call either\n\t\tJoinComplete or JoinFailed method on object implementing\n\t\torg.bluez.mesh.Application1 interface.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.AlreadyExists,\n"},{"Name":"Cancel","ReturnType":"void","Args":null,"Errors":null,"Docs":""},{"Name":"Attach","ReturnType":"object node, array{byte, array{(uint16, dict)}} configuration","Args":[{"Type":"object","Name":"app_root"},{"Type":"uint64","Name":"token"}],"Errors":null,"Docs":"\t\tThis is the first method that an application must call to get\n\t\taccess to mesh node functionalities.\n\t\tThe app_root parameter is a D-Bus object root path of\n\t\tthe application that implements org.bluez.mesh.Application1\n\t\tinterface. The application represents a node where child mesh\n\t\telements have their own objects that implement\n\t\torg.bluez.mesh.Element1 interface. The standard\n\t\tDBus.ObjectManager interface must be available on the\n\t\tapp_root path.\n\t\tThe token parameter is a 64-bit number that has been assigned to\n\t\tthe application when it first got provisioned/joined mesh\n\t\tnetwork, i.e. upon receiving JoinComplete() method. The daemon\n\t\tuses the token to verify whether the application is authorized\n\t\tto assume the mesh node identity.\n\t\tIn case of success, the method call returns mesh node object\n\t\t(see Mesh Node Hierarchy section) and current configuration\n\t\tsettings. The return value of configuration parameter is an\n\t\tarray, where each entry is a structure that contains element\n\t\tconfiguration. The element configuration structure is organized\n\t\tas follows:\n\t\tbyte\n\t\t\tElement index, identifies the element to which this\n\t\t\tconfiguration entry pertains.\n\t\tarray{struct}\n\t\t\tModels array where each entry is a structure with the\n\t\t\tfollowing members:\n\t\t\tuint16\n\t\t\t\tEither a SIG Model Identifier or, if Vendor key\n\t\t\t\tis present in model configuration dictionary, a\n\t\t\t\t16-bit vendor-assigned Model Identifier\n\t\t\tdict\n\t\t\t\tA dictionary that contains model configuration\n\t\t\t\twith the following keys defined:\n\t\t\t\tarray{uint16} Bindings\n\t\t\t\t\tIndices of application keys bound to the\n\t\t\t\t\tmodel\n\t\t\t\tuint32 PublicationPeriod\n\t\t\t\t\tModel publication period in milliseconds\n\t\t\t\tuint16 Vendor\n\t\t\t\t\tA 16-bit Company ID as defined by the\n\t\t\t\t\tBluetooth SIG\n\t\t\t\tarray{variant} Subscriptions\n\t\t\t\t\tAddresses the model is subscribed to.\n\t\t\t\t\tEach address is provided either as\n\t\t\t\t\tuint16 for group addresses, or\n\t\t\t\t\tas array{byte} for virtual labels.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.NotFound,\n\t\t\torg.bluez.mesh.Error.AlreadyExists,\n\t\t\torg.bluez.mesh.Error.Busy,\n\t\t\torg.bluez.mesh.Error.Failed\n"},{"Name":"Leave","ReturnType":"void","Args":[{"Type":"uint64","Name":"token"}],"Errors":null,"Docs":"\t\tThis removes the configuration information about the mesh node\n\t\tidentified by the 64-bit token parameter. The token parameter\n\t\thas been obtained as a result of successful Join() method call.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.NotFound\n\t\t\torg.bluez.mesh.Error.Busy\n"},{"Name":"CreateNetwork","ReturnType":"void","Args":[{"Type":"object","Name":"app_root"},{"Type":"array{byte}[16]","Name":"uuid"}],"Errors":null,"Docs":"\t\tThis is the first method that an application calls to become\n\t\ta Provisioner node, and a Configuration Client on a newly\n\t\tcreated Mesh Network.\n\t\tThe app_root parameter is a D-Bus object root path of the\n\t\tapplication that implements org.bluez.mesh.Application1\n\t\tinterface, and a org.bluez.mesh.Provisioner1 interface. The\n\t\tapplication represents a node where child mesh elements have\n\t\ttheir own objects that implement org.bluez.mesh.Element1\n\t\tinterface. The application hierarchy also contains a provision\n\t\tagent object that implements org.bluez.mesh.ProvisionAgent1\n\t\tinterface. The standard DBus.ObjectManager interface must be\n\t\tavailable on the app_root path.\n\t\tThe uuid parameter is a 16-byte array that contains Device UUID.\n\t\tThis UUID must be unique (at least from the daemon perspective),\n\t\ttherefore attempting to call this function using already\n\t\tregistered UUID results in an error. The composition of the UUID\n\t\toctets must be in compliance with RFC 4122.\n\t\tThe other information the bluetooth-meshd daemon will preserve\n\t\tabout the initial node, is to give it the initial primary\n\t\tunicast address (0x0001), and create and assign a net_key as the\n\t\tprimary network net_index (0x000).\n\t\tUpon successful processing of Create() method, the daemon\n\t\twill call JoinComplete method on object implementing\n\t\torg.bluez.mesh.Application1.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.AlreadyExists,\n"},{"Name":"Import","ReturnType":"void","Args":[{"Type":"object","Name":"app_root"},{"Type":"array{byte}[16]","Name":"uuid"},{"Type":"array{byte}[16]","Name":"dev_key"},{"Type":"array{byte}[16]","Name":"net_key"},{"Type":"uint16","Name":"net_index"},{"Type":"dict","Name":"flags"},{"Type":"uint32","Name":"iv_index"},{"Type":"uint16","Name":"unicast"}],"Errors":null,"Docs":"\t\tThis method creates a local mesh node based on node\n\t\tconfiguration that has been generated outside bluetooth-meshd.\n\t\tThe app_root parameter is a D-Bus object root path of the\n\t\tapplication that implements org.bluez.mesh.Application1\n\t\tinterface.\n\t\tThe uuid parameter is a 16-byte array that contains Device UUID.\n\t\tThis UUID must be unique (at least from the daemon perspective),\n\t\ttherefore attempting to call this function using already\n\t\tregistered UUID results in an error. The composition of the UUID\n\t\toctets must be in compliance with RFC 4122.\n\t\tThe dev_key parameter is the 16-byte value of the dev key of\n\t\tthe imported mesh node.\n\t\tRemaining parameters correspond to provisioning data:\n\t\tThe net_key and net_index parameters describe the network (or a\n\t\tsubnet, if net_index is not 0) the imported mesh node belongs\n\t\tto.\n\t\tThe flags parameter is a dictionary containing provisioning\n\t\tflags. Supported values are:\n\t\t\tboolean IvUpdate\n\t\t\t\tWhen true, indicates that the network is in the\n\t\t\t\tmiddle of IV Index Update procedure.\n\t\t\tboolean KeyRefresh\n\t\t\t\tWhen true, indicates that the specified net key\n\t\t\t\tis in the middle of a key refresh procedure.\n\t\tThe iv_index parameter is the current IV Index value used by\n\t\tthe network. This value is known by the provisioner.\n\t\tThe unicast parameter is the primary unicast address of the\n\t\timported node.\n\t\tUpon successful processing of Import() method, the daemon will\n\t\tcall JoinComplete method on object implementing\n\t\torg.bluez.mesh.Application1 interface.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments,\n\t\t\torg.bluez.mesh.Error.AlreadyExists,\n\t\t\torg.bluez.mesh.Error.NotSupported,\n\t\t\torg.bluez.mesh.Error.Failed\n"}],"Signals":[],"Properties":[]},{"Title":"Mesh Node Hierarchy","Description":"","Service":"org.bluez.mesh","Interface":"org.bluez.mesh.Node1","ObjectPath":"/org/bluez/mesh/node\u003cuuid\u003e\n\t\twhere \u003cuuid\u003e is the Device UUID passed to Join(),\n\t\tCreateNetwork() or Import()","Methods":[{"Name":"Send","ReturnType":"void","Args":[{"Type":"object","Name":"element_path"},{"Type":"uint16","Name":"destination"},{"Type":"uint16","Name":"key_index"},{"Type":"dict","Name":"options"},{"Type":"array{byte}","Name":"data"}],"Errors":null,"Docs":"\t\tThis method is used to send a message originated by a local\n\t\tmodel.\n\t\tThe element_path parameter is the object path of an element from\n\t\ta collection of the application elements (see Mesh Application\n\t\tHierarchy section).\n\t\tThe destination parameter contains the destination address. This\n\t\tdestination must be a uint16 to a unicast address, or a well\n\t\tknown group address.\n\t\tThe key_index parameter determines which application key to use\n\t\tfor encrypting the message. The key_index must be valid for that\n\t\telement, i.e., the application key must be bound to a model on\n\t\tthis element. Otherwise, org.bluez.mesh.Error.NotAuthorized will\n\t\tbe returned.\n\t\tThe options parameter is a dictionary with the following keys\n\t\tdefined:\n\t\t\tbool ForceSegmented\n\t\t\t\tSpecifies whether to force sending of a short\n\t\t\t\tmessage as one-segment payload. If not present,\n\t\t\t\tthe default setting is \"false\".\n\t\tThe data parameter is an outgoing message to be encypted by the\n\t\tbluetooth-meshd daemon and sent on.\n\t\tPossible errors:\n\t\t\torg.bluez.mesh.Error.NotAuthorized\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.NotFound\n"},{"Name":"DevKeySend","ReturnType":"void","Args":[{"Type":"object","Name":"element_path"},{"Type":"uint16","Name":"destination"},{"Type":"boolean","Name":"remote"},{"Type":"uint16","Name":"net_index"},{"Type":"dict","Name":"options"},{"Type":"array{byte}","Name":"data"}],"Errors":null,"Docs":"\t\tThis method is used to send a message originated by a local\n\t\tmodel encoded with the device key of the remote node.\n\t\tThe element_path parameter is the object path of an element from\n\t\ta collection of the application elements (see Mesh Application\n\t\tHierarchy section).\n\t\tThe destination parameter contains the destination address. This\n\t\tdestination must be a uint16 to a unicast address, or a well\n\t\tknown group address.\n\t\tThe remote parameter, if true, looks up the device key by the\n\t\tdestination address in the key database to encrypt the message.\n\t\tIf remote is true, but requested key does not exist, a NotFound\n\t\terror will be returned. If set to false, the local node's\n\t\tdevice key is used.\n\t\tThe net_index parameter is the subnet index of the network on\n\t\twhich the message is to be sent.\n\t\tThe options parameter is a dictionary with the following keys\n\t\tdefined:\n\t\t\tbool ForceSegmented\n\t\t\t\tSpecifies whether to force sending of a short\n\t\t\t\tmessage as one-segment payload. If not present,\n\t\t\t\tthe default setting is \"false\".\n\t\tThe data parameter is an outgoing message to be encypted by the\n\t\tmeshd daemon and sent on.\n\t\tPossible errors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.NotFound\n"},{"Name":"AddNetKey","ReturnType":"void","Args":[{"Type":"object","Name":"element_path"},{"Type":"uint16","Name":"destination"},{"Type":"uint16","Name":"subnet_index"},{"Type":"uint16","Name":"net_index"},{"Type":"boolean","Name":"update"}],"Errors":null,"Docs":"\t\tThis method is used to send add or update network key originated\n\t\tby the local configuration client to a remote configuration\n\t\tserver.\n\t\tThe element_path parameter is the object path of an element from\n\t\ta collection of the application elements (see Mesh Application\n\t\tHierarchy section).\n\t\tThe destination parameter contains the destination address. This\n\t\tdestination must be a uint16 to a nodes primary unicast address.\n\t\tThe subnet_index parameter refers to the subnet index of the\n\t\tnetwork that is being added or updated. This key must exist in\n\t\tthe local key database.\n\t\tThe net_index parameter is the subnet index of the network on\n\t\twhich the message is to be sent.\n\t\tThe update parameter indicates if this is an addition or an\n\t\tupdate. If true, the subnet key must be in the phase 1 state of\n\t\tthe key update procedure.\n\t\tPossible errors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.NotFound\n"},{"Name":"AddAppKey","ReturnType":"void","Args":[{"Type":"object","Name":"element_path"},{"Type":"uint16","Name":"destination"},{"Type":"uint16","Name":"app_index"},{"Type":"uint16","Name":"net_index"},{"Type":"boolean","Name":"update"}],"Errors":null,"Docs":"\t\tThis method is used to send add or update network key originated\n\t\tby the local configuration client to a remote configuration\n\t\tserver.\n\t\tThe element_path parameter is the object path of an element from\n\t\ta collection of the application elements (see Mesh Application\n\t\tHierarchy section).\n\t\tThe destination parameter contains the destination address. This\n\t\tdestination must be a uint16 to a nodes primary unicast address.\n\t\tThe app_index parameter refers to the application key which is\n\t\tbeing added or updated. This key must exist in the local key\n\t\tdatabase.\n\t\tThe net_index parameter is the subnet index of the network on\n\t\twhich the message is to be sent.\n\t\tThe update parameter indicates if this is an addition or an\n\t\tupdate. If true, the subnet key must be in the phase 1 state of\n\t\tthe key update procedure.\n\t\tPossible errors:\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n\t\t\torg.bluez.mesh.Error.NotFound\n"},{"Name":"Publish","ReturnType":"void","Args":[{"Type":"object","Name":"element_path"},{"Type":"uint16","Name":"model"},{"Type":"dict","Name":"options"},{"Type":"array{byte}","Name":"data"}],"Errors":null,"Docs":"\t\tThis method is used to send a publication originated by a local\n\t\tmodel. If the model does not exist, or it has no publication\n\t\trecord, the method returns org.bluez.mesh.Error.DoesNotExist\n\t\terror.\n\t\tThe element_path parameter is the object path of an element from\n\t\ta collection of the application elements (see Mesh Application\n\t\tHierarchy section).\n\t\tThe model parameter contains a model ID, as defined by the\n\t\tBluetooth SIG. If the options dictionary contains a \"Vendor\"\n\t\tkey, then this ID is defined by the specified vendor.\n\t\tThe options parameter is a dictionary with the following keys\n\t\tdefined:\n\t\t\tbool ForceSegmented\n\t\t\t\tSpecifies whether to force sending of a short\n\t\t\t\tmessage as one-segment payload. If not present,\n\t\t\t\tthe default setting is \"false\".\n\t\t\tuint16 Vendor\n\t\t\t\tA 16-bit Company ID as defined by the\n\t\t\t\tBluetooth SIG. This key should only exist when\n\t\t\t\tpublishing on a Vendor defined model.\n\t\tThe data parameter is an outgoing message to be encypted by the\n\t\tmeshd daemon and sent on.\n\t\tSince only one Publish record may exist per element-model, the\n\t\tdestination and key_index are obtained from the Publication\n\t\trecord cached by the daemon.\n\t\tPossible errors:\n\t\t\torg.bluez.mesh.Error.DoesNotExist\n\t\t\torg.bluez.mesh.Error.InvalidArguments\n"}],"Signals":[],"Properties":[{"Name":"Features","Type":"dict","Docs":"The dictionary that contains information about feature support.\n\t\tThe following keys are defined:","Flags":[1]},{"Name":"Friend","Type":"boolean","Docs":"Indicates the ability to establish a friendship with a\n\t\t\tLow Power node","Flags":[]},{"Name":"LowPower","Type":"boolean","Docs":"Indicates support for operating in Low Power node mode","Flags":[]},{"Name":"Proxy","Type":"boolean","Docs":"Indicates support for GATT proxy","Flags":[]},{"Name":"Relay","Type":"boolean","Docs":"Indicates support for relaying messages\n\n\tIf a key is absent from the dictionary, the feature is not supported.\n\tOtherwise, true means that the feature is enabled and false means that\n\tthe feature is disabled.","Flags":[]},{"Name":"Beacon","Type":"boolean","Docs":"This property indicates whether the periodic beaconing is\n\t\tenabled (true) or disabled (false).","Flags":[1]},{"Name":"IvUpdate","Type":"boolean","Docs":"When true, indicates that the network is in the middle of IV\n\t\tIndex Update procedure. This information is only useful for\n\t\tprovisioning.","Flags":[1]},{"Name":"IvIndex","Type":"uint32","Docs":"This property may be read at any time to determine the IV_Index\n\t\tthat the current network is on. This information is only useful\n\t\tfor provisioning.","Flags":[1]},{"Name":"SecondsSinceLastHeard","Type":"uint32","Docs":"This property may be read at any time to determine the number of\n\t\tseconds since mesh network layer traffic was last detected on\n\t\tthis node's network.","Flags":[1]},{"Name":"Addresses","Type":"array{uint16}","Docs":"This property contains unicast addresses of node's elements.","Flags":[1]},{"Name":"SequenceNumber","Type":"uint32","Docs":"This property may be read at any time to determine the\n\t\tsequence number.","Flags":[1]}]},{"Title":"Mesh Provisioning Hierarchy","Description":"","Service":"org.bluez.mesh","Interface":"org.bluez.mesh.Management1","ObjectPath":"/org/bluez/mesh/node\u003cuuid\u003e\n\t\twhere \u003cuuid\u003e is the Device UUID passed to Join(),\n\t\tCreateNetwork() or Import()","Methods":[],"Signals":[],"Properties":[]},{"Title":"Mesh Application Hierarchy","Description":"","Service":"unique name","Interface":"org.bluez.mesh.Application1","ObjectPath":"\u003capp_root\u003e","Methods":[{"Name":"JoinComplete","ReturnType":"void","Args":[{"Type":"uint64","Name":"token"}],"Errors":null,"Docs":"\t\tThis method is called when the node provisioning initiated\n\t\tby a Join() method call successfully completed.\n\t\tThe token parameter serves as a unique identifier of the\n\t\tparticular node. The token must be preserved by the application\n\t\tin order to authenticate itself to the mesh daemon and attach to\n\t\tthe network as a mesh node by calling Attach() method or\n\t\tpermanently remove the identity of the mesh node by calling\n\t\tLeave() method.\n\t\tIf this method returns an error, the daemon will assume that the\n\t\tapplication failed to preserve the token, and will remove the\n\t\tfreshly created node.\n"},{"Name":"JoinFailed","ReturnType":"void","Args":[{"Type":"string","Name":"reason"}],"Errors":null,"Docs":"\t\tThis method is called when the node provisioning initiated by\n\t\tJoin() has failed.\n\t\tThe reason parameter identifies the reason for provisioning\n\t\tfailure. The defined values are: \"timeout\", \"bad-pdu\",\n\t\t\"confirmation-failed\", \"out-of-resources\", \"decryption-error\",\n\t\t\"unexpected-error\", \"cannot-assign-addresses\".\n"}],"Signals":[],"Properties":[{"Name":"CompanyID","Type":"uint16","Docs":"A 16-bit Bluetooth-assigned Company Identifier of the vendor as\n\t\tdefined by Bluetooth SIG","Flags":[1]},{"Name":"ProductID","Type":"uint16","Docs":"A 16-bit vendor-assigned product identifier","Flags":[1]},{"Name":"VersionID","Type":"uint16","Docs":"A 16-bit vendor-assigned product version identifier","Flags":[1]},{"Name":"CRPL","Type":"uint16","Docs":"A 16-bit minimum number of replay protection list entries","Flags":[1,5]}]},{"Title":"Mesh Element Hierarchy","Description":"","Service":"unique name","Interface":"org.bluez.mesh.Element1","ObjectPath":"\u003capp_defined_element_path\u003e","Methods":[{"Name":"MessageReceived","ReturnType":"void","Args":[{"Type":"uint16","Name":"source"},{"Type":"uint16","Name":"key_index"},{"Type":"variant","Name":"destination"},{"Type":"array{byte}","Name":"data"}],"Errors":null,"Docs":"\t\tThis method is called by bluetooth-meshd daemon when a message\n\t\tarrives addressed to the application.\n\t\tThe source parameter is unicast address of the remote\n\t\tnode-element that sent the message.\n\t\tThe key_index parameter indicates which application key has been\n\t\tused to decode the incoming message. The same key_index should\n\t\tbe used by the application when sending a response to this\n\t\tmessage (in case a response is expected).\n\t\tThe destination parameter contains the destination address of\n\t\treceived message. Underlying variant types are:\n\t\tuint16\n\t\t\tDestination is an unicast address, or a well known\n\t\t\tgroup address\n\t\tarray{byte}\n\t\t\tDestination is a virtual address label\n\t\tThe data parameter is the incoming message.\n"},{"Name":"DevKeyMessageReceived","ReturnType":"void","Args":[{"Type":"uint16","Name":"source"},{"Type":"boolean","Name":"remote"},{"Type":"uint16","Name":"net_index"},{"Type":"array{byte}","Name":"data"}],"Errors":null,"Docs":"\t\tThis method is called by meshd daemon when a message arrives\n\t\taddressed to the application, which was sent with the remote\n\t\tnode's device key.\n\t\tThe source parameter is unicast address of the remote\n\t\tnode-element that sent the message.\n\t\tThe remote parameter if true indicates that the device key\n\t\tused to decrypt the message was from the sender. False\n\t\tindicates that the local nodes device key was used, and the\n\t\tmessage has permissions to modify local states.\n\t\tThe net_index parameter indicates what subnet the message was\n\t\treceived on, and if a response is required, the same subnet\n\t\tmust be used to send the response.\n\t\tThe data parameter is the incoming message.\n"},{"Name":"UpdateModelConfiguration","ReturnType":"void","Args":[{"Type":"uint16","Name":"model_id"},{"Type":"dict","Name":"config"}],"Errors":null,"Docs":"\t\tThis method is called by bluetooth-meshd daemon when a model's\n\t\tconfiguration is updated.\n\t\tThe model_id parameter contains BT SIG Model Identifier or, if\n\t\tVendor key is present in config dictionary, a 16-bit\n\t\tvendor-assigned Model Identifier.\n\t\tThe config parameter is a dictionary with the following keys\n\t\tdefined:\n\t\tarray{uint16} Bindings\n\t\t\tIndices of application keys bound to the model\n\t\tuint32 PublicationPeriod\n\t\t\tModel publication period in milliseconds\n\t\tuint16 Vendor\n\t\t\tA 16-bit Bluetooth-assigned Company Identifier of the\n\t\t\tvendor as defined by Bluetooth SIG\n\t\tarray{variant} Subscriptions\n\t\t\tAddresses the model is subscribed to.\n\t\t\tEach address is provided either as uint16 for group\n\t\t\taddresses, or as array{byte} for virtual labels.\n"}],"Signals":[],"Properties":[{"Name":"Models","Type":"array{(uint16 id, dict caps)}","Docs":"An array of SIG Models:\n\n\t\t\tid - SIG Model Identifier\n\n\t\t\toptions - a dictionary that may contain additional model\n\t\t\tinfo. The following keys are defined:","Flags":[1]},{"Name":"Publish","Type":"boolean","Docs":"supports publication mechanism. If not\n\t\t\t\t\tpresent, publication is enabled.","Flags":[]},{"Name":"Subscribe","Type":"boolean","Docs":"supports subscription mechanism. If not\n\t\t\t\t\tpresent, subscriptons are enabled.\n\n\t\tThe array may be empty.","Flags":[]},{"Name":"VendorModels","Type":"array{(uint16 vendor, uint16 id, dict options)}","Docs":"An array of Vendor Models:\n\n\t\t\tvendor - a 16-bit Bluetooth-assigned Company ID as\n\t\t\tdefined by Bluetooth SIG.\n\n\t\t\tid - a 16-bit vendor-assigned Model Identifier\n\n\t\t\toptions - a dictionary that may contain additional model\n\t\t\tinfo. The following keys are defined:","Flags":[1]},{"Name":"Publish","Type":"boolean","Docs":"supports publication mechanism","Flags":[]},{"Name":"Subscribe","Type":"boolean","Docs":"supports subscription mechanism\n\n\t\tThe array may be empty.","Flags":[]},{"Name":"Location","Type":"uint16","Docs":"Location descriptor as defined in the GATT Bluetooth Namespace\n\t\tDescriptors section of the Bluetooth SIG Assigned Numbers","Flags":[1,5]}]},{"Title":"Mesh Attention Hierarchy","Description":"","Service":"unique name","Interface":"org.bluez.mesh.Attention1","ObjectPath":"freely definable","Methods":[{"Name":"SetTimer","ReturnType":"void","Args":[{"Type":"uint8","Name":"element_index"},{"Type":"uint16","Name":"time"}],"Errors":null,"Docs":"\t\tThe element_index parameter is the element's index within the\n\t\tnode where the health server model is hosted.\n\t\tThe time parameter indicates how many seconds the attention\n\t\tstate shall be on.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.NotSupported\n"},{"Name":"GetTimer","ReturnType":"uint16","Args":[{"Type":"uint16","Name":"element"}],"Errors":null,"Docs":"\t\tThe element parameter is the unicast address within the node\n\t\twhere the health server model is hosted.\n\t\tReturns the number of seconds for how long the attention action\n\t\tremains staying on.\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.NotSupported\n"}],"Signals":[],"Properties":[]},{"Title":"Mesh Provisioner Hierarchy","Description":"","Service":"unique name","Interface":"org.bluez.mesh.Provisioner1","ObjectPath":"freely definable","Methods":[{"Name":"ScanResult","ReturnType":"void","Args":[{"Type":"int16","Name":"rssi"},{"Type":"array{byte}","Name":"data"},{"Type":"dict","Name":"options"}],"Errors":null,"Docs":"\t\tThe method is called from the bluetooth-meshd daemon when a\n\t\tunique UUID has been seen during UnprovisionedScan() for\n\t\tunprovsioned devices.\n\t\tThe rssi parameter is a signed, normalized measurement of the\n\t\tsignal strength of the recieved unprovisioned beacon.\n\t\tThe data parameter is a variable length byte array, that may\n\t\thave 1, 2 or 3 distinct fields contained in it including the 16\n\t\tbyte remote device UUID (always), a 16 bit mask of OOB\n\t\tauthentication flags (optional), and a 32 bit URI hash (if URI\n\t\tbit set in OOB mask). Whether these fields exist or not is a\n\t\tdecision of the unprovisioned device.\n\t\tThe options parameter is a dictionary that may contain\n\t\tadditional optional configuration info:\n\t\tuint16 Server\n\t\t\tSpecifies the remote server that received the\n\t\t\tUnprovisioned beacon. If not present, beacon was\n\t\t\treceived locally.\n\t\tuint8 array ExtendedData\n\t\t\tIf Extended data was requested during scanning, any\n\t\t\treceived data will be returned here.\n\t\tIf a beacon with a UUID that has already been reported is\n\t\trecieved by the daemon, it will be silently discarded unless it\n\t\twas recieved at a higher rssi power level.\n"},{"Name":"RequestProvData","ReturnType":"uint16 net_index, uint16 unicast","Args":[{"Type":"uint8","Name":"count"}],"Errors":null,"Docs":"\t\tThis method is implemented by a Provisioner capable application\n\t\tand is called when the remote device has been fully\n\t\tauthenticated and confirmed.\n\t\tThe count parameter is the number of consecutive unicast\n\t\taddresses the remote device is requesting.\n\t\tReturn Parameters are from the Mesh Profile Spec:\n\t\tnet_index - Subnet index of the net_key\n\t\tunicast - Primary Unicast address of the new node\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.Abort\n"},{"Name":"RequestReprovData","ReturnType":"uint16 unicast","Args":[{"Type":"uint16","Name":"original"},{"Type":"uint8","Name":"count"}],"Errors":null,"Docs":"\t\tThis method is implemented by a Provisioner capable application\n\t\tand is called when the remote node being reprovisioned has been\n\t\tfully authenticated and confirmed. This method will only be\n\t\tcalled if the NPPI-1 procedure (Node Address Refresh) is being\n\t\tperformed.\n\t\tThe original parameter is the current unicast address of the\n\t\tnode being reprovisioned.\n\t\tThe count parameter is the number of consecutive unicast\n\t\taddresses the remote node is requesting.\n\t\tReturn Parameter:\n\t\tunicast - Primary Unicast address of the new node\n\t\tPossibleErrors:\n\t\t\torg.bluez.mesh.Error.Abort\n"},{"Name":"AddNodeComplete","ReturnType":"void","Args":[{"Type":"array{byte}[16]","Name":"uuid"},{"Type":"uint16","Name":"unicast"},{"Type":"uint8","Name":"count"}],"Errors":null,"Docs":"\t\tThis method is called when the node provisioning initiated\n\t\tby an AddNode() method call successfully completed.\n\t\tThe unicast parameter is the primary address that has been\n\t\tassigned to the new node, and the address of it's config server.\n\t\tThe count parameter is the number of unicast addresses assigned\n\t\tto the new node.\n\t\tThe new node may now be sent messages using the credentials\n\t\tsupplied by the RequestProvData method.\n"},{"Name":"ReprovComplete","ReturnType":"void","Args":[{"Type":"uint16","Name":"original"},{"Type":"uint8","Name":"nppi"},{"Type":"uint16","Name":"unicast"},{"Type":"uint8","Name":"count"}],"Errors":null,"Docs":"\t\tThis method is called when the node Reprovisioning initiated\n\t\tby a Reprovision() method call successfully completed.\n\t\tThe original parameter is the former primary address of the\n\t\tnode that has been reprovisioned.\n\t\tThe nppi parameter indicates which NPPI procedure was performed.\n\t\tIf procedure 1 or 2 was performed, the node is materially\n\t\tdifferent than it was before reprovisioning, and Composition,\n\t\tBindings, Publication and Subscription settings should be\n\t\trefreshed.\n\t\tThe unicast parameter is the new primary address that has been\n\t\tassigned to the node, If NPPI procedure 1 was performed this\n\t\tvalue may be different from the original. If procedure 0 or 2\n\t\twas performed, the original and new primary address should be\n\t\tthe same.\n\t\tThe count parameter is the number of unicast addresses assigned\n\t\tto the node.\n\t\tThe node may now be sent messages using the credentials\n\t\tsupplied by the RequestReprovData method.\n"},{"Name":"AddNodeFailed","ReturnType":"void","Args":[{"Type":"array{byte}[16]","Name":"uuid"},{"Type":"string","Name":"reason"}],"Errors":null,"Docs":"\t\tThis method is called when the node provisioning initiated by\n\t\tAddNode() has failed. Depending on how far Provisioning\n\t\tproceeded before failing, some cleanup of cached data may be\n\t\trequired.\n\t\tThe reason parameter identifies the reason for provisioning\n\t\tfailure. The defined values are: \"aborted\", \"timeout\",\n\t\t\"bad-pdu\", \"confirmation-failed\", \"out-of-resources\",\n\t\t\"decryption-error\", \"unexpected-error\",\n\t\t\"cannot-assign-addresses\".\n"},{"Name":"ReprovFailed","ReturnType":"void","Args":[{"Type":"uint16","Name":"unicast"},{"Type":"string","Name":"reason"}],"Errors":null,"Docs":"\t\tThis method is called when node reprovisioning initiated by\n\t\tReprovision() has failed. If reprovisioning has failed, the\n\t\tprior credentials of the remote node may still be valid.\n\t\tThe reason parameter identifies the reason for provisioning\n\t\tfailure. The defined values are: \"aborted\", \"timeout\",\n\t\t\"bad-pdu\", \"confirmation-failed\", \"out-of-resources\",\n\t\t\"decryption-error\", \"unexpected-error\",\n\t\t\"cannot-assign-addresses\".\n"}],"Signals":[],"Properties":[]},{"Title":"Provisioning Agent Hierarchy","Description":"","Service":"unique name","Interface":"org.bluez.mesh.ProvisionAgent1","ObjectPath":"freely definable","Methods":[{"Name":"PrivateKey","ReturnType":"array{byte}","Args":[],"Errors":null,"Docs":"\t\tThis method is called during provisioning if the Provisioner\n\t\thas requested Out-Of-Band ECC key exchange. The Private key is\n\t\treturned to the Daemon, and the Public Key is delivered to the\n\t\tremote Provisioner using a method that does not involve the\n\t\tBluetooth Mesh system. The Private Key returned must be 32\n\t\toctets in size, or the Provisioning procedure will fail and be\n\t\tcanceled.\n\t\tThis function will only be called if the Provisioner has\n\t\trequested pre-determined keys to be exchanged Out-of-Band, and\n\t\tthe local role is Unprovisioned device.\n"},{"Name":"PublicKey","ReturnType":"array{byte}","Args":[],"Errors":null,"Docs":"\t\tThis method is called during provisioning if the local device is\n\t\tthe Provisioner, and is requestng Out-Of-Band ECC key exchange.\n\t\tThe Public key is returned to the Daemon that is the matched\n\t\tpair of the Private key of the remote device. The Public Key\n\t\treturned must be 64 octets in size, or the Provisioning\n\t\tprocedure will fail and be canceled.\n\t\tThis function will only be called if the Provisioner has\n\t\trequested pre-determined keys to be exchanged Out-of-Band, and\n\t\tthe local role is Provisioner.\n"},{"Name":"DisplayString","ReturnType":"void","Args":[{"Type":"string","Name":"value"}],"Errors":null,"Docs":"\t\tThis method is called when the Daemon has something important\n\t\tfor the Agent to Display, but does not require any additional\n\t\tinput locally. For instance: \"Enter \"ABCDE\" on remote device\".\n"},{"Name":"DisplayNumeric","ReturnType":"void","Args":[{"Type":"string","Name":"type"},{"Type":"uint32","Name":"number"}],"Errors":null,"Docs":"\t\tThis method is called when the Daemon has something important\n\t\tfor the Agent to Display, but does not require any additional\n\t\tinput locally. For instance: \"Enter 14939264 on remote device\".\n\t\tThe type parameter indicates the display method. Allowed values\n\t\tare:\n\t\t\t\"blink\" - Locally blink LED\n\t\t\t\"beep\" - Locally make a noise\n\t\t\t\"vibrate\" - Locally vibrate\n\t\t\t\"out-numeric\" - Display value to enter remotely\n\t\t\t\"push\" - Request pushes on remote button\n\t\t\t\"twist\" - Request twists on remote knob\n\t\tThe number parameter is the specific value represented by the\n\t\tPrompt.\n"},{"Name":"PromptNumeric","ReturnType":"uint32","Args":[{"Type":"string","Name":"type"}],"Errors":null,"Docs":"\t\tThis method is called when the Daemon requests the user to\n\t\tenter a decimal value between 1-99999999.\n\t\tThe type parameter indicates the input method. Allowed values\n\t\tare:\n\t\t\t\"blink\" - Enter times remote LED blinked\n\t\t\t\"beep\" - Enter times remote device beeped\n\t\t\t\"vibrate\" - Enter times remote device vibrated\n\t\t\t\"in-numeric\" - Enter remotely displayed value\n\t\t\t\"push\" - Push local button remotely requested times\n\t\t\t\"twist\" - Twist local knob remotely requested times\n\t\tThis agent should prompt the user for specific input. For\n\t\tinstance: \"Enter value being displayed by remote device\".\n"},{"Name":"PromptStatic","ReturnType":"array{byte}[16]","Args":[{"Type":"string","Name":"type"}],"Errors":null,"Docs":"\t\tThis method is called when the Daemon requires a 16 octet byte\n\t\tarray, as an Out-of-Band authentication.\n\t\tThe type parameter indicates the input method. Allowed values\n\t\tare:\n\t\t\t\"static-oob\" - return 16 octet array\n\t\t\t\"in-alpha\" - return 16 octet alpha array\n\t\tThe Static data returned must be 16 octets in size, or the\n\t\tProvisioning procedure will fail and be canceled. If input type\n\t\tis \"in-alpha\", the printable characters should be\n\t\tleft-justified, with trailing 0x00 octets filling the remaining\n\t\tbytes.\n"},{"Name":"Cancel","ReturnType":"void","Args":[],"Errors":null,"Docs":"\t\tThis method gets called by the daemon to cancel any existing\n\t\tAgent Requests. When called, any pending user input should be\n\t\tcanceled, and any display requests removed.\n"}],"Signals":[],"Properties":[{"Name":"Capabilities","Type":"array{string}","Docs":"An array of strings with the following allowed values:\n\t\t\t\"blink\"\n\t\t\t\"beep\"\n\t\t\t\"vibrate\"\n\t\t\t\"out-numeric\"\n\t\t\t\"out-alpha\"\n\t\t\t\"push\"\n\t\t\t\"twist\"\n\t\t\t\"in-numeric\"\n\t\t\t\"in-alpha\"\n\t\t\t\"static-oob\"\n\t\t\t\"public-oob\"","Flags":[1]},{"Name":"OutOfBandInfo","Type":"array{string}","Docs":"Indicates availability of OOB data. An array of strings with the\n\t\tfollowing allowed values:\n\t\t\t\"other\"\n\t\t\t\"uri\"\n\t\t\t\"machine-code-2d\"\n\t\t\t\"bar-code\"\n\t\t\t\"nfc\"\n\t\t\t\"number\"\n\t\t\t\"string\"\n\t\t\t\"on-box\"\n\t\t\t\"in-box\"\n\t\t\t\"on-paper\",\n\t\t\t\"in-manual\"\n\t\t\t\"on-device\"","Flags":[1,5]},{"Name":"URI","Type":"string","Docs":"Uniform Resource Identifier points to out-of-band (OOB)\n\t\tinformation (e.g., a public key)","Flags":[1,5]}]}]},{"FileName":"org.bluez.Adapter.rst","Name":"BlueZ D-Bus Adapter API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Adapter API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.Adapter1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[{"Name":"StartDiscovery","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.NotReady","org.bluez.Error.Failed"],"Docs":"Starts device discovery session which may include starting an inquiry\n\tand/or scanning procedures and remote device name resolving.\n\n\tUse **StopDiscovery** to release the sessions acquired.\n\n\tThis process will start creating Device objects as new devices are\n\tdiscovered.\n\n\tDuring discovery RSSI delta-threshold is imposed.\n\n\tEach client can request a single device discovery session per adapter.\n\n\tPossible errors:\n\n\t:org.bluez.Error.NotReady:\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:"},{"Name":"StopDiscovery","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.NotReady","org.bluez.Error.Failed"],"Docs":"Stops device discovery session started by **StartDiscovery**.\n\n\tNote that a discovery procedure is shared between all discovery sessions\n\tthus calling StopDiscovery will only release a single session and\n\tdiscovery will stop when all sessions from all clients have finished.\n\n\tPossible errors:\n\n\t:org.bluez.Error.NotReady:\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.NotAuthorized:"},{"Name":"RemoveDevice","ReturnType":"void","Args":[{"Type":"object","Name":"device"}],"Errors":["org.bluez.Error.InvalidArguments"],"Docs":"Removes the remote device object at the given path including cahed\n\tinformation such as bonding information.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.Failed:"},{"Name":"SetDiscoveryFilter","ReturnType":"void","Args":[{"Type":"dict","Name":"filter"}],"Errors":[],"Docs":"Sets the device discovery filter for the caller. When this method is\n\tcalled with no filter parameter, filter is removed.\n\n\tPossible filter values:\n\n\t:array{string} UUIDs:\n\n\t\tFilter by service UUIDs, empty means match *any* UUID.\n\n\t\tWhen a remote device is found that advertises any UUID from\n\t\tUUIDs, it will be reported if:\n\n\t\t- **Pathloss** and **RSSI** are both empty.\n\t\t- only **Pathloss** param is set, device advertise TX power, and\n\t\t  computed pathloss is less than Pathloss param.\n\t\t- only **RSSI** param is set, and received RSSI is higher\n\t\t  than RSSI param.\n\n\t:int16 RSSI:\n\n\t\tRSSI threshold value.\n\n\t\tPropertiesChanged signals will be emitted for already existing\n\t\tDevice objects, with updated RSSI value. If one or more\n\t\tdiscovery filters have been set, the RSSI delta-threshold, that\n\t\tis imposed by StartDiscovery by default, will not be applied.\n\n\t:uint16 Pathloss:\n\n\t\tPathloss threshold value.\n\n\t\tPropertiesChanged signals will be emitted for already existing\n\t\tDevice objects, with updated Pathloss value.\n\n\t:string Transport (Default \"auto\"):\n\n\t\tTransport parameter determines the type of scan.\n\n\t\tPossible values:\n\n\t\t:\"auto\":\n\n\t\t\tInterleaved scan, use LE, BREDR, or both, depending on\n\t\t\twhat's currently enabled.\n\n\t\t:\"bredr\":\n\n\t\t\tBR/EDR inquiry only.\n\n\t\t:\"le\":\n\n\t\t\tLE scan only.\n\n\n\t:bool DuplicateData (Default true):\n\n\t\tDisables duplicate detection of advertisement data.\n\n\t\tWhen enabled PropertiesChanged signals will be generated for\n\t\teither ManufacturerData and ServiceData everytime they are\n\t\tdiscovered.\n\n\t:bool Discoverable (Default false):\n\n\t\tMake adapter discoverable while discovering, if the adapter is\n\t\talready discoverable setting this filter won't do anything.\n\n\t:string Pattern (Default none):\n\n\t\tDiscover devices where the pattern matches either the prefix of\n\t\tthe address or device name which is convenient way to limited\n\t\tthe number of device objects created during a discovery.\n\n\t\tWhen set disregards device discoverable flags.\n\n\t\tNote: The pattern matching is ignored if there are other client\n\t\tthat don't set any pattern as it work as a logical OR, also\n\t\tsetting empty string \"\" pattern will match any device found.\n\n\t\tWhen discovery filter is set, Device objects will be created as\n\t\tnew devices with matching criteria are discovered regardless of\n\t\tthey are connectable or discoverable which enables listening to\n\t\tnon-connectable and non-discoverable devices.\n\n\t\tWhen multiple clients call SetDiscoveryFilter, their filters are\n\t\tinternally merged, and notifications about new devices are sent\n\t\tto all clients. Therefore, each client must check that device\n\t\tupdates actually match its filter.\n\n\t\tWhen SetDiscoveryFilter is called multiple times by the same\n\t\tclient, last filter passed will be active for given client.\n\n\t\tSetDiscoveryFilter can be called before StartDiscovery.\n\t\tIt is useful when client will create first discovery session,\n\t\tto ensure that proper scan will be started right after call to\n\t\tStartDiscovery.\n\n\t\tPossible errors:\n\n\t\t:org.bluez.Error.NotReady:\n\t\t:org.bluez.Error.NotSupported:\n\t\t:org.bluez.Error.Failed:"},{"Name":"GetDiscoveryFilters","ReturnType":"array{string}","Args":[],"Errors":[],"Docs":"Returns available filters that can be given to **SetDiscoveryFilter**.\n\n\tPossible errors: None"},{"Name":"ConnectDevice","ReturnType":"object","Args":[{"Type":"dict","Name":"properties"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.AlreadyExists","org.bluez.Error.NotSupported"],"Docs":"connects to device without need of performing General Discovery.\n\tConnection mechanism is similar to Connect method on\n\t**org.bluez.Device1(5)** interface with exception that this method\n\treturns success when physical connection is established and you can\n\tspecify bearer to connect with parameter. After this method returns,\n\tservices discovery will continue and any supported profile will be\n\tconnected. There is no need for calling Connect on Device1 after this\n\tcall. If connection was successful this method returns object path to\n\tcreated device object or device that already exist.\n\n\tPossible properties values:\n\n\t:string Address (Mandatory):\n\n\t\tThe Bluetooth device address of the remote device.\n\n\t:string AddressType (Default \"BR/EDR\"):\n\n\t\tThe Bluetooth device Address Type. This is address type that\n\t\tshould be used for initial connection.\n\n\t\tPossible values:\n\n\t\t:\"public\":\n\n\t\t\tPublic address\n\n\t\t:\"random\":\n\n\t\t\tRandom address\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.NotReady:"}],"Signals":[],"Properties":[{"Name":"Address","Type":"string","Docs":"The Bluetooth device address.","Flags":[1]},{"Name":"AddressType","Type":"string","Docs":"The Bluetooth Address Type. For dual-mode and BR/EDR only adapter this\n\tdefaults to \"public\". Single mode LE adapters may have either value.\n\tWith privacy enabled this contains type of Identity Address and not\n\ttype of address used for connection.\n\n\tPossible values:\n\n\t:\"public\":\n\n\t\tPublic address.\n\n\n\t:\"random:\n\n\t\tRandom address.","Flags":[1]},{"Name":"Name","Type":"string","Docs":"The Bluetooth system name (pretty hostname).\n\n\tThis property is either a static system default or controlled by an\n\texternal daemon providing access to the pretty hostname configuration.","Flags":[1]},{"Name":"Alias","Type":"string","Docs":"The Bluetooth friendly name. This value can be changed.\n\n\tIn case no alias is set, it will return the system provided name.\n\tSetting an empty string as alias will convert it back to the system\n\tprovided name.\n\n\tWhen resetting the alias with an empty string, the property will default\n\tback to system name.\n\n\tOn a well configured system, this property never needs to be changed\n\tsince it defaults to the system name and provides the pretty hostname.\n\tOnly if the local name needs to be different from the pretty hostname,\n\tthis property should be used as last resort.","Flags":[3]},{"Name":"Class","Type":"uint32","Docs":"The Bluetooth class of device.\n\n\tThis property represents the value that is either automatically\n\tconfigured by DMI/ACPI information or provided as static configuration.","Flags":[1]},{"Name":"Powered","Type":"boolean","Docs":"Switch an adapter on or off. This will also set the appropriate\n\tconnectable state of the controller.\n\n\tThe value of this property is not persistent. After restart or\n\tunplugging of the adapter it will reset back to false.","Flags":[3]},{"Name":"PowerState","Type":"string","Docs":"The power state of an adapter.\n\n\tThe power state will show whether the adapter is turning off, or turning\n\ton, as well as being on or off.\n\n\tPossible values:\n\n\t:\"on\":\n\n\t\tPowered on.\n\n\t:\"off\":\n\n\t\tPowered off\n\n\t:\"off-enabling\":\n\n\t\tTransitioning from \"off\" to \"on\".\n\n\t:\"on-disabling\":\n\n\t\tTransitioning from \"on\" to \"off\".\n\n\t:\"off-blocked\":\n\n\t\tBlocked by rfkill.","Flags":[1,4]},{"Name":"Discoverable","Type":"boolean","Docs":"Switch an adapter to discoverable or non-discoverable to either make it\n\tvisible or hide it. This is a global setting and should only be used by\n\tthe settings application.\n\n\tIf the DiscoverableTimeout is set to a non-zero value then the system\n\twill set this value back to false after the timer expired.\n\n\tIn case the adapter is switched off, setting this value will fail.\n\n\tWhen changing the Powered property the new state of this property will\n\tbe updated via a PropertiesChanged signal.","Flags":[3]},{"Name":"Pairable","Type":"boolean","Docs":"Switch an adapter to pairable or non-pairable. This is a global setting\n\tand should only be used by the settings application.\n\n\tNote that this property only affects incoming pairing requests.","Flags":[3]},{"Name":"PairableTimeout","Type":"uint32","Docs":"The pairable timeout in seconds. A value of zero means that the timeout\n\tis disabled and it will stay in pairable mode forever.","Flags":[3]},{"Name":"DiscoverableTimeout","Type":"uint32","Docs":"The discoverable timeout in seconds. A value of zero means that the\n\ttimeout is disabled and it will stay in discoverable/limited mode\n\tforever.","Flags":[3]},{"Name":"Discovering","Type":"boolean","Docs":"Indicates that a device discovery procedure is active.","Flags":[1]},{"Name":"UUIDs","Type":"array{string}","Docs":"List of 128-bit UUIDs that represents the available local services.","Flags":[1]},{"Name":"Modalias","Type":"string","Docs":"Local Device ID information in modalias format used by the kernel and\n\tudev.","Flags":[1,5]},{"Name":"Roles","Type":"array{string}","Docs":"List of supported roles.\n\n\tPossible values:\n\n\t:\"central\":\n\n\t\tSupports the central role.\n\n\t:\"peripheral\":\n\n\t\tSupports the peripheral role.\n\n\t:\"central-peripheral\":\n\n\t\tSupports both roles concurrently.","Flags":[1]},{"Name":"ExperimentalFeatures","Type":"array{string}","Docs":"List of 128-bit UUIDs that represents the experimental features\n\tcurrently enabled.","Flags":[1,5]},{"Name":"Manufacturer","Type":"uint16","Docs":"The manufacturer of the device, as a uint16 company identifier defined\n\tby the Core Bluetooth Specification.","Flags":[1]},{"Name":"Version","Type":"byte","Docs":"The Bluetooth version supported by the device, as a core version code\n\tdefined by the Core Bluetooth Specification.","Flags":[1]}]}]},{"FileName":"org.bluez.AdminPolicySet.rst","Name":"BlueZ D-Bus AdminPolicySet API documentation","Description":"This API provides methods to control the behavior of **bluetoothd(8)** as an\nadministrator.\n\nInterface AdminPolicySet1 provides methods to set policies. Once the policy is\nset successfully, it will affect all clients and stay persistently even after\nrestarting **bluetoothd(8)**. The only way to clear it is to overwrite the\npolicy with the same method.\n\nInterface\n=========\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.AdminPolicySet1 [experimental]\n:Object path:\t[variable prefix]/{hci0,hci1,...}","Api":[{"Title":"BlueZ D-Bus AdminPolicySet API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.AdminPolicySet1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[{"Name":"SetServiceAllowList","ReturnType":"void","Args":[{"Type":"array{string}","Name":"UUIDs"}],"Errors":[],"Docs":"Sets the service allowlist by specifying service UUIDs.\n\n\tWhen called, **bluetoothd(8)** will block incoming and outgoing\n\tconnections to the service not in UUIDs for all of the clients.\n\n\tAny subsequent calls to this method will supersede any previously set\n\tallowlist values.  Calling this method with an empty array will allow\n\tany service UUIDs to be used.\n\n\tThe default value is an empty array.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.AdminPolicyStatus.rst","Name":"BlueZ D-Bus AdminPolicyStatus API documentation","Description":"Interface AdminPolicyStatus1 provides readonly properties to indicate the\ncurrent values of admin policy affecting the Adapter and Device objects.\n\nInterface\n=========\n\nAdapter\n-------\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.AdminPolicyStatus1 [experimental]\n:Object path:\t[variable prefix]/{hci0,hci1,...}\n\nDevice\n------\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.AdminPolicyStatus1 [experimental]\n:Object path:\t[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Api":[{"Title":"BlueZ D-Bus AdminPolicyStatus API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.AdminPolicyStatus1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[],"Signals":[],"Properties":[{"Name":"ServiceAllowList","Type":"array{string}","Docs":"Current value of service allow list.","Flags":[1]},{"Name":"IsAffectedByPolicy","Type":"bool","Docs":"Indicate if there is any auto-connect profile in this device is not\n\tallowed by admin policy.","Flags":[1]}]}]},{"FileName":"org.bluez.AdvertisementMonitor.rst","Name":"BlueZ D-Bus AdvertisementMonitor API documentation","Description":"This API allows an client to specify a job of monitoring advertisements by\nregistering the root of hierarchy and then exposing advertisement monitors\nunder the root with filtering conditions, thresholds of RSSI and timers\nof RSSI thresholds.\n\nOnce a monitoring job is activated by **bluetoothd(8)**, the client can expect\nto get notified on the targeted advertisements no matter if there is an ongoing\ndiscovery session (see **StartDiscovery()** in **org.bluez.Adapter(5)**).\n\nInterface\n=========\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.AdvertisementMonitor1 [experimental]\n:Object path:\tfreely definable","Api":[{"Title":"BlueZ D-Bus AdvertisementMonitor API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.AdvertisementMonitor1","ObjectPath":"freely definable","Methods":[{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This gets called as a signal for a client to perform clean-up when:\n\n\t- Monitor cannot be activated after it was exposed\n\t- Monitor has been deactivated."},{"Name":"Activate","ReturnType":"void","Args":[],"Errors":[],"Docs":"After a monitor was exposed, this gets called as a signal for client to\n\tget acknowledged when a monitor has been activated, so the client can\n\texpect to receive calls on **DeviceFound()** or **DeviceLost()**."},{"Name":"DeviceFound","ReturnType":"void","Args":[{"Type":"object","Name":"device"}],"Errors":[],"Docs":"This gets called to notify the client of finding the targeted device.\n\tOnce receiving the call, the client should start to monitor the\n\tcorresponding device to retrieve the changes on RSSI and advertisement\n\tcontent."},{"Name":"DeviceLost","ReturnType":"void","Args":[{"Type":"object","Name":"device"}],"Errors":[],"Docs":"This gets called to notify the client of losing the targeted device.\n\tOnce receiving this call, the client should stop monitoring the"}],"Signals":[],"Properties":[{"Name":"Type","Type":"string","Docs":"The type of the monitor. See **SupportedMonitorTypes** in\n\t**org.bluez.AdvertisementMonitorManager(5)** for the available options.","Flags":[1]},{"Name":"RSSILowThreshold","Type":"int16","Docs":"Used in conjunction with **RSSILowTimeout** to determine whether a\n\tdevice becomes out-of-range. Valid range is -127 to 20 (dBm), while 127\n\tindicates unset.","Flags":[1,5]},{"Name":"RSSIHighThreshold","Type":"int16","Docs":"Used in conjunction with RSSIHighTimeout to determine whether a device\n\tbecomes in-range. Valid range is -127 to 20 (dBm), while 127 indicates\n\tunset.","Flags":[1,5]},{"Name":"RSSILowTimeout","Type":"uint16","Docs":"The time it takes to consider a device as out-of-range. If this many\n\tseconds elapses without receiving any signal at least as strong as\n\t**RSSILowThreshold**, a currently in-range device will be considered as\n\tout-of-range (lost). Valid range is 1 to 300 (seconds), while 0\n\tindicates unset.","Flags":[1,5]},{"Name":"RSSIHighTimeout","Type":"uint16","Docs":"The time it takes to consider a device as in-range. If this many\n\tseconds elapses while we continuouslyreceive signals at least as strong\n\tas **RSSIHighThreshold**, a currently out-of-range device will be\n\tconsidered as in-range (found). Valid range is 1 to 300 (seconds),\n\twhile 0 indicates unset.","Flags":[1,5]},{"Name":"RSSISamplingPeriod","Type":"uint16","Docs":"Grouping rules on how to propagate the received advertisement packets\n\tto the client.\n\n\tPossible values:\n\n\t:0:\n\t\tAll advertisement packets from in-range devices would be\n\t\tpropagated.\n\n\t:255:\n\t\tOnly the first advertisement packet of in-range devices would\n\t\tbe propagated. If the device becomes lost, then the first\n\t\tpacket when it is found again will also be propagated.\n\n\t:1 to 254:\n\t\tAdvertisement packets would be grouped into 100ms * N time\n\t\tperiod. Packets in the same group will only be reported once,\n\t\twith the RSSI value being averaged out.\n\n\tCurrently this is unimplemented in user space, so the value is only\n\tused to be forwarded to the kernel.","Flags":[1,5]},{"Name":"Patterns","Type":"array{(uint8, uint8, array{byte})}","Docs":"If the **Type** property is set to **\"or_patterns\"**, then this\n\tproperty must exist and have at least one entry in the array.\n\n\tThe structure of a pattern contains the following:\n\n\t:uint8 start_position:\n\n\t\tThe index in an AD data field where the search hould start. The\n\t\tbeginning of an AD data field is index 0.\n\n\t:uint8 AD_data_type:\n\n\t\tSee https://www.bluetooth.com/specifications/assigned-numbers/\n\t\tgeneric-access-profile/ for the possible allowed value.\n\n\t:array{byte} content_of_pattern:\n\n\t\tThis is the value of the pattern. The maximum length of the\n\t\tbytes is 31.","Flags":[1,5]}]}]},{"FileName":"org.bluez.AdvertisementMonitorManager.rst","Name":"BlueZ D-Bus AdvertisementMonitorManager API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus AdvertisementMonitorManager API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.AdvertisementMonitorManager1","ObjectPath":"/org/bluez/{hci0,hci1,...}","Methods":[{"Name":"RegisterMonitor","ReturnType":"void","Args":[{"Type":"object","Name":"application"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.AlreadyExists"],"Docs":"Registers the root path of a hierarchy of advertisement monitors\n\timplementing **org.bluez.AdvertisementMonitor(5)**.\n\n\tThe application object path together with the D-Bus ystem bus\n\tconnection ID define the identification of the application registering\n\tadvertisement monitors.\n\n\tOnce a root path is registered by a client via this method, the client\n\tcan freely expose/unexpose advertisement monitors without re-registering\n\tthe root path again. After use, the client should call\n\t**UnregisterMonitor()** method to invalidate the advertisement monitors.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:\n\t:org.bluez.Error.Failed:"},{"Name":"UnregisterMonitor","ReturnType":"void","Args":[{"Type":"object","Name":"application"}],"Errors":[],"Docs":"Unregisters a hierarchy of advertisement monitors that has been\n\tpreviously registered with **RegisterMonitor()**. The object path\n\tparameter must match the same value that has been used on registration.\n\n\tUpon unregistration, the advertisement monitor(s) should expect to\n\treceive **Release()** method as the signal that the advertisement\n\tmonitor(s) has been deactivated.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:"}],"Signals":[],"Properties":[{"Name":"SupportedMonitorTypes","Type":"array{string}","Docs":"This lists the supported types of advertisement monitors. An application\n\tshould check this before instantiate and expose an object of\n\t**org.bluez.AdvertisementMonitor(5)**.\n\n\tPossible values:\n\n\t:\"or_patterns\":\n\n\t\tPatterns with logic OR applied. With this type, property\n\t\t**Patterns** must exist and has at least one pattern.","Flags":[1]},{"Name":"SupportedFeatures","Type":"array{string}","Docs":"This lists the features of advertisement monitoring supported by\n\t**bluetoothd(8)**.\n\n\tPossible values:\n\n\t:\"controller-patterns\":\n\n\t\tIf the controller is capable of performing advertisement\n\t\tmonitoring by patterns, **bluetoothd(8)** would offload the\n\t\tpatterns to the controller to reduce power consumption.","Flags":[1]}]}]},{"FileName":"org.bluez.Agent.rst","Name":"BlueZ D-Bus Agent API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Agent API documentation","Description":"","Service":"unique name","Interface":"org.bluez.Agent1","ObjectPath":"freely definable","Methods":[{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called when the service daemon unregisters the agent.\n\tAn agent can use it to do cleanup tasks. There is no need to unregister\n\tthe agent, because when this method gets called it has already been\n\tunregistered."},{"Name":"RequestPinCode","ReturnType":"string","Args":[{"Type":"object","Name":"device"}],"Errors":["org.bluez.Error.Rejected"],"Docs":"This method gets called when the service daemon needs to get the passkey\n\tfor an authentication.\n\n\tThe return value should be a string of 1-16 characters length. The\n\tstring can be alphanumeric.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:\n\t:org.bluez.Error.Canceled:"},{"Name":"DisplayPinCode","ReturnType":"void","Args":[{"Type":"object","Name":"device"},{"Type":"string","Name":"pincode"}],"Errors":["org.bluez.Error.Rejected"],"Docs":"This method gets called when the service daemon needs to display a\n\tpincode for an authentication.\n\n\tAn empty reply should be returned. When the pincode needs no longer to\n\tbe displayed, the Cancel method of the agent will be called.\n\n\tThis is used during the pairing process of keyboards that don't support\n\tBluetooth 2.1 Secure Simple Pairing, in contrast to DisplayPasskey which\n\tis used for those that do.\n\n\tThis method will only ever be called once since older keyboards do not\n\tsupport typing notification.\n\n\tNote that the PIN will always be a 6-digit number, zero-padded to 6\n\tdigits. This is for harmony with the later specification.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:\n\t:org.bluez.Error.Canceled:"},{"Name":"RequestPasskey","ReturnType":"uint32","Args":[{"Type":"object","Name":"device"}],"Errors":["org.bluez.Error.Rejected"],"Docs":"This method gets called when the service daemon needs to get the passkey\n\tfor an authentication.\n\n\tThe return value should be a numeric value between 0-999999.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:\n\t:org.bluez.Error.Canceled:"},{"Name":"DisplayPasskey","ReturnType":"void","Args":[{"Type":"object","Name":"device"},{"Type":"uint32","Name":"passkey"},{"Type":"uint16","Name":"entered"}],"Errors":[],"Docs":"This method gets called when the service daemon needs to display a\n\tpasskey for an authentication.\n\n\tThe entered parameter indicates the number of already typed keys on the\n\tremote side.\n\n\tAn empty reply should be returned. When the passkey needs no longer to\n\tbe displayed, the Cancel method of the agent will be called.\n\n\tDuring the pairing process this method might be called multiple times to\n\tupdate the entered value.\n\n\tNote that the passkey will always be a 6-digit number, so the display\n\tshould be zero-padded at the start if the value contains less than 6\n\tdigits."},{"Name":"RequestConfirmation","ReturnType":"void","Args":[{"Type":"object","Name":"device"},{"Type":"uint32","Name":"passkey"}],"Errors":["org.bluez.Error.Rejected"],"Docs":"This method gets called when the service daemon needs to confirm a\n\tpasskey for an authentication.\n\n\tTo confirm the value it should return an empty reply or an error in case\n\tthe passkey is invalid.\n\n\tNote that the passkey will always be a 6-digit number, so the display\n\tshould be zero-padded at the start if the value contains less than 6\n\tdigits.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:\n\t:org.bluez.Error.Canceled:"},{"Name":"RequestAuthorization","ReturnType":"void","Args":[{"Type":"object","Name":"device"}],"Errors":["org.bluez.Error.Rejected"],"Docs":"This method gets called to request the user to authorize an incoming\n\tpairing attempt which would in other circumstances trigger the\n\tjust-works model, or when the user plugged in a device that implements\n\tcable pairing. In the latter case, the device would not be connected to\n\tthe adapter via Bluetooth yet.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:\n\t:org.bluez.Error.Canceled:"},{"Name":"AuthorizeService","ReturnType":"void","Args":[{"Type":"object","Name":"device"},{"Type":"string","Name":"uuid"}],"Errors":["org.bluez.Error.Rejected"],"Docs":"This method gets called when the service daemon needs to authorize a\n\tconnection/service request.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:\n\t:org.bluez.Error.Canceled:"},{"Name":"Cancel","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called to indicate that the agent request failed before"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.AgentManager.rst","Name":"BlueZ D-Bus AgentManager API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus AgentManager API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.AgentManager1","ObjectPath":"/org/bluez","Methods":[{"Name":"RegisterAgent","ReturnType":"void","Args":[{"Type":"object","Name":"agent"},{"Type":"string","Name":"capability"}],"Errors":["org.bluez.Error.InvalidArguments"],"Docs":"Registers pairing agent.\n\n\tThe object path defines the path of the agent that will be called when\n\tuser input is needed and must implement **org.bluez.Agent(5)**\n\tinterface.\n\n\tEvery application can register its own agent and for all actions\n\ttriggered by that application its agent is used.\n\n\tIt is not required by an application to register an agent. If an\n\tapplication does chooses to not register an agent, the default agent is\n\tused. This is on most cases a good idea. Only application like a pairing\n\twizard should register their own agent.\n\n\tAn application can only register one agent. Multiple agents per\n\tapplication is not supported.\n\n\tPossible capability values:\n\n\t:\"\":\n\n\t\tFallback to \"KeyboardDisplay\".\n\n\t:\"DisplayOnly\":\n\t:\"DisplayYesNo\":\n\t:\"KeyboardOnly\":\n\t:\"NoInputNoOutput\":\n\t:\"KeyboardDisplay\":\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:"},{"Name":"UnregisterAgent","ReturnType":"void","Args":[{"Type":"object","Name":"agent"}],"Errors":[],"Docs":"Unregisters an agent that has been previously registered using\n\t**RegisterAgent**. The object path parameter must match the same value\n\tthat has been used on registration.\n\n\tPossible errors:\n\n\t:org.bluez.Error.DoesNotExist:"},{"Name":"RequestDefaultAgent","ReturnType":"void","Args":[{"Type":"object","Name":"agent"}],"Errors":[],"Docs":"Requests to make the application agent the default agent. The\n\tapplication is required to register an agent.\n\n\tSpecial permission might be required to become the default agent.\n\n\tPossible errors:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.Battery.rst","Name":"BlueZ D-Bus Battery API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Battery API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.Battery1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[],"Signals":[],"Properties":[{"Name":"Percentage","Type":"byte","Docs":"The percentage of battery left as an unsigned 8-bit integer.","Flags":[1]},{"Name":"Source","Type":"string","Docs":"Describes where the battery information comes from.\n\n\tThis property is informational only and may be useful for debugging\n\tpurposes.\n\n\tProviders from **org.bluez.BatteryProvider(5)** may make use\n\tof this property to indicate where the battery report comes from\n\t(e.g. \"HFP 1.7\", \"HID\", or the profile UUID).","Flags":[1,5]}]}]},{"FileName":"org.bluez.BatteryProvider.rst","Name":"BlueZ D-Bus BatteryProvider API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus BatteryProvider API documentation","Description":"","Service":"\u003cclient D-Bus address\u003e","Interface":"org.bluez.BatteryProvider1","ObjectPath":"{provider_root}/{unique battery object path}","Methods":[],"Signals":[],"Properties":[{"Name":"Device","Type":"object","Docs":"The object path of the device that has this battery.","Flags":[1]}]}]},{"FileName":"org.bluez.BatteryProviderManager.rst","Name":"BlueZ D-Bus BatteryProviderManager API documentation","Description":"A battery provider starts by registering itself as a battery provider with the\n**RegisterBatteryProvider()** method passing an object path as the provider ID.\nThen, it can start exposing **org.bluez.BatteryProvider(5)** objects having the\npath starting with the given provider ID. It can also remove objects at any\ntime.\nThe objects and their properties exposed by battery providers will be reflected\non **org.bluez.Battery(5)** interface.\n\n**bluetoothd(8)** will stop monitoring these exposed and removed objects after\nUnregisterBatteryProvider is called for that provider ID.\n\nInterface\n=========\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.BatteryProviderManager1\n:Object path:\t/org/bluez/{hci0,hci1,...}","Api":[{"Title":"BlueZ D-Bus BatteryProviderManager API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.BatteryProviderManager1","ObjectPath":"/org/bluez/{hci0,hci1,...}","Methods":[{"Name":"RegisterBatteryProvider","ReturnType":"void","Args":[{"Type":"object","Name":"provider"}],"Errors":[],"Docs":"Registers a battery provider. A registered battery provider can then\n\texpose objects with **org.bluez.BatteryProvider(5)** interface."},{"Name":"UnregisterBatteryProvider","ReturnType":"void","Args":[{"Type":"object","Name":"provider"}],"Errors":[],"Docs":"Unregisters a battery provider previously registered with\n\t**RegisterBatteryProvider()**. After unregistration, the\n\t**org.bluez.BatteryProvider(5)** objects provided by this client are"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.Device.rst","Name":"BlueZ D-Bus Device API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Device API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.Device1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[{"Name":"Connect","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.NotReady","org.bluez.Error.Failed","org.bluez.Error.InProgress"],"Docs":"Connects all profiles the remote device supports that can be connected\n\tto and have been flagged as auto-connectable. If only subset of profiles\n\tis already connected it will try to connect currently disconnected ones.\n\n\tIf at least one profile was connected successfully this method will\n\tindicate success.\n\n\tFor dual-mode devices only one bearer is connected at time, the\n\tconditions are in the following order:\n\n\t1. Connect the disconnected bearer if already connected.\n\n\t2. Connect first the bonded bearer. If no bearers are bonded or both\n\tare skip and check latest seen bearer.\n\n\t3. Connect last seen bearer, in case the timestamps are the same BR/EDR\n\ttakes precedence.\n\n\tPossible errors:\n\n\t:org.bluez.Error.NotReady:\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.AlreadyConnected:"},{"Name":"Disconnect","ReturnType":"void","Args":[],"Errors":[],"Docs":"Disconnects all connected profiles and then terminates low-level ACL\n\tconnection.\n\n\tACL connection will be terminated even if some profiles were not\n\tdisconnected properly e.g. due to misbehaving device.\n\n\tThis method can be also used to cancel a preceding Connect call before\n\ta reply to it has been received.\n\n\tFor non-trusted devices connected over LE bearer calling this method\n\twill disable incoming connections until Connect method is called again.\n\n\tPossible errors:\n\n\t:org.bluez.Error.NotConnected:"},{"Name":"ConnectProfile","ReturnType":"void","Args":[{"Type":"string","Name":"uuid"}],"Errors":["org.bluez.Error.Failed","org.bluez.Error.InProgress","org.bluez.Error.InvalidArguments","org.bluez.Error.NotAvailable"],"Docs":"Connects a specific profile of this device. The UUID provided is the\n\tremote service UUID for the profile.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotAvailable:\n\t:org.bluez.Error.NotReady:"},{"Name":"DisconnectProfile","ReturnType":"void","Args":[{"Type":"string","Name":"uuid"}],"Errors":["org.bluez.Error.Failed","org.bluez.Error.InProgress","org.bluez.Error.InvalidArguments"],"Docs":"Disconnects a specific profile of this device. The profile needs to be\n\tregistered client profile.\n\n\tThere is no connection tracking for a profile, so as long as the\n\tprofile is registered this will always succeed.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:"},{"Name":"Pair","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.Failed","org.bluez.Error.AlreadyExists","org.bluez.Error.AuthenticationCanceled","org.bluez.Error.AuthenticationFailed","org.bluez.Error.AuthenticationRejected","org.bluez.Error.AuthenticationTimeout"],"Docs":"Connects to the remote device and initiate pairing procedure then\n\tproceed with service discovery.\n\n\tIf the application has registered its own agent, then that specific\n\tagent will be used. Otherwise it will use the default agent.\n\n\tOnly for applications like a pairing wizard it would make sense to have\n\tits own agent. In almost all other cases the default agent will handle\n\tthis just fine.\n\n\tIn case there is no application agent and also no default agent present,\n\tthis method will fail.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.AlreadyExists:\n\t:org.bluez.Error.AuthenticationCanceled:\n\t:org.bluez.Error.AuthenticationFailed:\n\t:org.bluez.Error.AuthenticationRejected:\n\t:org.bluez.Error.AuthenticationTimeout:\n\t:org.bluez.Error.ConnectionAttemptFailed:"},{"Name":"CancelPairing","ReturnType":"void","Args":[],"Errors":[],"Docs":"Cancels a pairing operation initiated by the **Pair** method.\n\n\tPossible errors:\n\n\t:org.bluez.Error.DoesNotExist:"}],"Signals":[],"Properties":[{"Name":"Address","Type":"string","Docs":"The Bluetooth device address of the remote device.","Flags":[1]},{"Name":"AddressType","Type":"string","Docs":"The Bluetooth device Address Type. For dual-mode and BR/EDR only devices\n\tthis defaults to \"public\". Single mode LE devices may have either value.\n\tIf remote device uses privacy than before pairing this represents\n\taddress type used for connection and Identity Address after pairing.\n\n\tPossible values:\n\n\t:\"public\":\n\n\t\tPublic address\n\n\t:\"random\":\n\n\t\tRandom address","Flags":[1]},{"Name":"Name","Type":"string","Docs":"The Bluetooth remote name.\n\n\tThis value is only present for completeness. It is better to always use\n\tthe **Alias** property when displaying the devices name.\n\n\tIf the **Alias** property is unset, it will reflect this value which\n\tmakes it more convenient.","Flags":[1,5]},{"Name":"Icon","Type":"string","Docs":"Proposed icon name according to the freedesktop.org icon naming\n\tspecification.","Flags":[1,5]},{"Name":"Class","Type":"uint32","Docs":"The Bluetooth class of device of the remote device.","Flags":[1,5]},{"Name":"Appearance","Type":"uint16","Docs":"External appearance of device, as found on GAP service.","Flags":[1,5]},{"Name":"UUIDs","Type":"array{string}","Docs":"List of 128-bit UUIDs that represents the available remote services.","Flags":[1,5]},{"Name":"Paired","Type":"boolean","Docs":"Indicates if the remote device is paired. Paired means the pairing\n\tprocess where devices exchange the information to establish an\n\tencrypted connection has been completed.","Flags":[1]},{"Name":"Bonded","Type":"boolean","Docs":"Indicates if the remote device is bonded. Bonded means the information\n\texchanged on pairing process has been stored and will be persisted.","Flags":[1]},{"Name":"Connected","Type":"boolean","Docs":"Indicates if the remote device is currently connected.\n\tA PropertiesChanged signal indicate changes to this status.","Flags":[1]},{"Name":"Trusted","Type":"boolean","Docs":"Indicates if the remote is seen as trusted. This setting can be changed\n\tby the application.","Flags":[3]},{"Name":"Blocked","Type":"boolean","Docs":"If set to true any incoming connections from the device will be\n\timmediately rejected. Any device drivers will also be removed and\n\tno new ones will be probed as long as the device is blocked.","Flags":[3]},{"Name":"WakeAllowed","Type":"boolean","Docs":"If set to true this device will be allowed to wake the host from\n\tsystem suspend.","Flags":[3]},{"Name":"Alias","Type":"string","Docs":"The name alias for the remote device. The alias can be used to have a\n\tdifferent friendly name for the remote device.\n\n\tIn case no alias is set, it will return the remote device name. Setting\n\tan empty string as alias will convert it back to the remote device name.\n\n\tWhen resetting the alias with an empty string, the property will default\n\tback to the remote name.","Flags":[3]},{"Name":"Adapter","Type":"object","Docs":"The object path of the adapter the device belongs to.","Flags":[1]},{"Name":"LegacyPairing","Type":"boolean","Docs":"Set to true if the device only supports the pre-2.1 pairing mechanism.\n\tThis property is useful during device discovery to anticipate whether\n\tlegacy or simple pairing will occur if pairing is initiated.\n\n\tNote that this property can exhibit false-positives in the case of\n\tBluetooth 2.1 (or newer) devices that have disabled Extended Inquiry\n\tResponse support.","Flags":[1]},{"Name":"Modalias","Type":"string","Docs":"Remote Device ID information in modalias format used by the kernel and\n\tudev.","Flags":[1,5]},{"Name":"RSSI","Type":"int16","Docs":"Received Signal Strength Indicator of the remote device (inquiry or\n\tadvertising).","Flags":[1,5]},{"Name":"TxPower","Type":"int16","Docs":"Advertised transmitted power level (inquiry or advertising).","Flags":[1,5]},{"Name":"ManufacturerData","Type":"dict","Docs":"Manufacturer specific advertisement data. Keys are 16 bits Manufacturer\n\tID followed by its byte array value.","Flags":[1,5]},{"Name":"ServiceData","Type":"dict","Docs":"Service advertisement data. Keys are the UUIDs in string format followed\n\tby its byte array value.","Flags":[1,5]},{"Name":"ServicesResolved","Type":"bool","Docs":"Indicate whether or not service discovery has been resolved.","Flags":[1]},{"Name":"AdvertisingFlags","Type":"array{byte}","Docs":"The Advertising Data Flags of the remote device.","Flags":[1,4]},{"Name":"AdvertisingData","Type":"dict","Docs":"The Advertising Data of the remote device. Keys are 1 byte AD Type\n\tfollowed by data as byte array.\n\n\tNote: Only types considered safe to be handled by application are\n\texposed.\n\n\tPossible values:\n\n\t:\u003ctype\u003e:\n\n\t\t\u003cbyte array\u003e\n\n\tExample:\n\n\t\t\u003cTransport Discovery\u003e \u003cOrganization Flags...\u003e\n\t\t0x26                   0x01         0x01...","Flags":[1,4]},{"Name":"Sets","Type":"array{object, dict}","Docs":"The object paths of the sets the device belongs to followed by a\n\tdictionary which can contain the following:\n\n\t:byte Rank:\n\n\t\tRank of the device in the Set.","Flags":[1,4]}]}]},{"FileName":"org.bluez.DeviceSet.rst","Name":"BlueZ D-Bus DeviceSet API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus DeviceSet API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.DeviceSet1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/set_{sirk}","Methods":[{"Name":"Connect","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.NotReady","org.bluez.Error.Failed","org.bluez.Error.InProgress"],"Docs":"Connects all **devices** members of the set, each member is\n\tconnected in sequence as they were added/loaded following the\n\tsame proceedure as described in **Device1.Connect**.\n\n\tPossible errors:\n\n\t:org.bluez.Error.NotReady:\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.AlreadyConnected:"},{"Name":"Disconnect","ReturnType":"void","Args":[],"Errors":[],"Docs":"Disconnects all **devices** members of the set, each member is\n\tdisconnected in sequence as they were connected following the\n\tsame proceedure as described in **Device1.Disconnect**.\n\n\tPossible errors:"}],"Signals":[],"Properties":[{"Name":"Adapter","Type":"object","Docs":"The object path of the adapter the set belongs to.","Flags":[1,4]},{"Name":"AutoConnect","Type":"bool","Docs":"Indicates if the **devices** members of the set shall be automatically\n\tconnected once any of its members is connected.","Flags":[3,4]},{"Name":"Devices","Type":"array(object)","Docs":"List of devices objects that are members of the set.","Flags":[4]},{"Name":"Size","Type":"byte","Docs":"Set members size.","Flags":[1,4]}]}]},{"FileName":"org.bluez.GattCharacteristic.rst","Name":"BlueZ D-Bus GattCharacteristic API documentation","Description":"GATT local/server and remote/client characteristic attribute representation\nshare the same high-level D-Bus API.\n\nLocal/Server refers to GATT based characteristics exported by a plugin or an\nexternal application.\n\nRemote/Client refers to GATT characteristics exported by the peer.\n\nInterface\n=========\n\nClient\n------\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.GattCharacteristic1\n:Object path:\t[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/serviceXX/charYYYY\n\nServer\n------\n\n:Service:\tunique name\n:Interface:\torg.bluez.GattCharacteristic1\n:Object path:\tfreely definable","Api":[{"Title":"BlueZ D-Bus GattCharacteristic API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.GattCharacteristic1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/serviceXX/charYYYY","Methods":[{"Name":"ReadValue","ReturnType":"array{byte}","Args":[{"Type":"dict","Name":"options"}],"Errors":[],"Docs":"Issues a request to read the value of the characteristic and returns the\n\tvalue if the operation was successful.\n\n\tPossible options:\n\n\t:uint16_t offset:\n\n\t\tRead start offset in bytes.\n\n\t:uint16_t mtu (server only):\n\n\t\tExchange MTU in bytes.\n\n\t:object device (server only):\n\n\t\tDevice object.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\n\t\tPossible values: string 0x80 - 0x9f\n\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.NotPermitted:\n\t:org.bluez.Error.NotAuthorized:\n\t:org.bluez.Error.InvalidOffset:\n\t:org.bluez.Error.NotSupported:"},{"Name":"WriteValue","ReturnType":"void","Args":[{"Type":"array{byte}","Name":"value"},{"Type":"dict","Name":"options"}],"Errors":[],"Docs":"Issues a request to write the value of the characteristic.\n\n\tPossible options:\n\n\t:uint16 offset:\n\n\t\tWrite start offset in bytes.\n\n\t:string type:\n\n\t\tPossible values:\n\n\t\t:\"command\":\n\n\t\t\tUse Write without response procedure.\n\n\t\t:\"request\":\n\n\t\t\tUse Write with response procedure.\n\n\t\t:\"reliable\":\n\n\t\t\tUse Reliable Write procedure.\n\n\t:uint16 mtu:\n\n\t\tExchanged MTU (Server only).\n\n\t:object device:\n\n\t\tDevice path (Server only).\n\n\t:string link:\n\n\t\tLink type (Server only).\n\n\t\tPossible values:\n\n\t\t:\"BR/EDR\":\n\t\t:\"LE\":\n\n\t:boolean prepare-authorize:\n\n\t\tTrue if prepare authorization request.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\n\t\tPossible values: string 0x80 - 0x9f\n\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.NotPermitted:\n\t:org.bluez.Error.InvalidValueLength:\n\t:org.bluez.Error.NotAuthorized:\n\t:org.bluez.Error.NotSupported:"},{"Name":"AcquireWrite","ReturnType":"fd, uint16","Args":[{"Type":"dict","Name":"options"}],"Errors":[],"Docs":"Acquire file descriptor and MTU for writing. Only sockets are supported.\n\tUsage of WriteValue will be locked causing it to return NotPermitted\n\terror.\n\n\tFor server the MTU returned shall be equal or smaller than the\n\tnegotiated MTU.\n\n\tFor client it only works with characteristic that has **WriteAcquired**\n\tproperty which relies on write-without-response **Flag**.\n\n\tTo release the lock the client shall close the file descriptor, a HUP\n\tis generated in case the device is disconnected.\n\n\tNote: the MTU can only be negotiated once and is symmetric therefore\n\tthis method may be delayed in order to have the exchange MTU completed,\n\tbecause of that the file descriptor is closed during reconnections as\n\tthe MTU has to be renegotiated.\n\n\tPossible options:\n\n\t:object device:\n\n\t\tObject Device (Server only).\n\n\t:uint16 mtu:\n\n\t\tExchanged MTU (Server only).\n\n\t:string link:\n\n\t\tLink type (Server only).\n\n\t\tPossible values:\n\n\t\t:\"BR/EDR\":\n\t\t:\"LE\":\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.NotSupported:"},{"Name":"AcquireNotify","ReturnType":"fd, uint16","Args":[{"Type":"dict","Name":"options"}],"Errors":[],"Docs":"Acquire file descriptor and MTU for notify. Only sockets are support.\n\n\tUsage of StartNotify will be locked causing it to return\n\t**org.bluez.Error.NotPermitted**.\n\n\tFor server the MTU returned shall be equal or smaller than the\n\tnegotiated MTU.\n\n\tOnly works with characteristic that has **NotifyAcquired** property\n\twhich relies on **\"notify\"** **Flag** and no other client have called\n\t**StartNotify()**.\n\n\tNotification are enabled during this procedure so **StartNotify()**\n\tshall not be called, any notification will be dispatched via file\n\tdescriptor therefore the Value property is not affected during the time\n\twhere notify has been acquired.\n\n\tTo release the lock the client shall close the file descriptor, a HUP is\n\tgenerated in case the device is disconnected.\n\n\tNote: the MTU can only be negotiated once and is symmetric therefore\n\tthis method may be delayed in order to have the exchange MTU completed,\n\tbecause of that the file descriptor is closed during reconnections as\n\tthe MTU has to be renegotiated.\n\n\tPossible options:\n\n\t:object device:\n\n\t\tObject Device (Server only).\n\n\t:uint16 mtu:\n\n\t\tExchanged MTU (Server only).\n\n\t:string link:\n\n\t\tLink type (Server only).\n\n\t\tPossible values:\n\n\t\t:\"BR/EDR\":\n\t\t:\"LE\":\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.NotPermitted:"},{"Name":"StartNotify","ReturnType":"void","Args":[],"Errors":[],"Docs":"Starts a notification session from this characteristic if it supports\n\tvalue notifications or indications.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.NotPermitted:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.NotConnected:\n\t:org.bluez.Error.NotSupported:"},{"Name":"StopNotify","ReturnType":"void","Args":[],"Errors":[],"Docs":"Stops or cancel session previously created by **StartNotify()**.\n\n\tNote that notifications from a characteristic are shared between\n\tsessions thus calling StopNotify will release a single session.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:"},{"Name":"","ReturnType":"void Confirm() [noreply, optional]","Args":[{"Type":"Server","Name":"only"}],"Errors":[],"Docs":"Confirms value was received.\n\n\tPossible Errors:"}],"Signals":[],"Properties":[{"Name":"UUID","Type":"string","Docs":"128-bit characteristic UUID.","Flags":[1]},{"Name":"Service","Type":"object","Docs":"Object path of the GATT service the characteristic belongs to.","Flags":[1]},{"Name":"Value","Type":"array{byte}","Docs":"The cached value of the characteristic. This property gets updated only\n\tafter a successful read request and when a notification or indication\n\tis received, upon which a PropertiesChanged signal will be emitted.","Flags":[1,5]},{"Name":"WriteAcquired","Type":"boolean","Docs":"True, if this characteristic has been acquired by any client using\n\tAcquireWrite.\n\n\tFor client properties is ommited in case 'write-without-response' flag\n\tis not set.\n\n\tFor server the presence of this property indicates that AcquireWrite is\n\tsupported.","Flags":[1,5]},{"Name":"NotifyAcquired","Type":"boolean","Docs":"True, if this characteristic has been acquired by any client using\n\tAcquireNotify.\n\n\tFor client this properties is ommited in case 'notify' flag is not set.\n\n\tFor server the presence of this property indicates that AcquireNotify\n\tis supported.","Flags":[1,5]},{"Name":"Notifying","Type":"boolean","Docs":"True, if notifications or indications on this characteristic are\n\tcurrently enabled.","Flags":[1,5]},{"Name":"Flags","Type":"array{string}","Docs":"Defines how the characteristic value can be used. See Core spec\n\t\"Table 3.5: Characteristic Properties bit field\", and\n\t\"Table 3.8: Characteristic Extended Properties bit field\".\n\n\tThe \"x-notify\" and \"x-indicate\" flags restrict access to notifications\n\tand indications by imposing write restrictions on a characteristic's\n\tclient characteristic configuration descriptor.\n\n\tPossible values:\n\n\t:\"broadcast\":\n\t:\"read\":\n\t:\"write-without-response\":\n\t:\"write\":\n\t:\"notify\":\n\t:\"indicate\":\n\t:\"authenticated-signed-writes\":\n\t:\"extended-properties\":\n\t:\"reliable-write\":\n\t:\"writable-auxiliaries\":\n\t:\"encrypt-read\":\n\t:\"encrypt-write\":\n\t:\"encrypt-notify\" (Server only):\n\t:\"encrypt-indicate\" (Server only):\n\t:\"encrypt-authenticated-read\":\n\t:\"encrypt-authenticated-write\":\n\t:\"encrypt-authenticated-notify\" (Server only):\n\t:\"encrypt-authenticated-indicate\" (Server only):\n\t:\"secure-read\" (Server only):\n\t:\"secure-write\" (Server only):\n\t:\"secure-notify\" (Server only):\n\t:\"secure-indicate\" (Server only):\n\t:\"authorize\":","Flags":[1]},{"Name":"MTU","Type":"uint16","Docs":"Characteristic MTU, this is valid both for **ReadValue()** and\n\t**WriteValue()** but either method can use long procedures when\n\tsupported.","Flags":[1]}]}]},{"FileName":"org.bluez.GattDescriptor.rst","Name":"BlueZ D-Bus GattDescriptor API documentation","Description":"GATT local/server and remote/client descriptor attribute representation\nshare the same high-level D-Bus API.\n\nLocal/Server refers to GATT based descriptors exported by a plugin or an\nexternal application.\n\nRemote/Client refers to GATT descriptors exported by the peer.\n\nInterface\n=========\n\nClient\n------\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.GattDescriptor1\n:Object path:\t[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/serviceXX/charYYYY/descriptorZZZ\n\nServer\n------\n\n:Service:\tunique name\n:Interface:\torg.bluez.GattDescriptor1\n:Object path:\tfreely definable","Api":[{"Title":"BlueZ D-Bus GattDescriptor API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.GattDescriptor1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/serviceXX/charYYYY/descriptorZZZ","Methods":[{"Name":"ReadValue","ReturnType":"array{byte}","Args":[{"Type":"dict","Name":"flags"}],"Errors":[],"Docs":"Issues a request to read the value of the descriptor and returns the\n\tvalue if the operation was successful.\n\n\tPossible options:\n\n\t:uint16_t offset:\n\n\t\tRead start offset in bytes.\n\n\t:object device (server only):\n\n\t\tDevice object.\n\n\t:string link:\n\n\t\tLink type (Server only).\n\n\t\tPossible values:\n\n\t\t:\"BR/EDR\":\n\t\t:\"LE\":\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.NotPermitted:\n\t:org.bluez.Error.NotAuthorized:\n\t:org.bluez.Error.NotSupported:"},{"Name":"WriteValue","ReturnType":"void","Args":[{"Type":"array{byte}","Name":"value"},{"Type":"dict","Name":"flags"}],"Errors":[],"Docs":"Issues a request to write the value of the descriptor.\n\n\tPossible flags:\n\n\t:uint16 offset:\n\n\t\tWrite start offset in bytes.\n\n\t:uint16 mtu:\n\n\t\tExchanged MTU (Server only).\n\n\t:object device:\n\n\t\tDevice path (Server only).\n\n\t:string link:\n\n\t\tLink type (Server only).\n\n\t\tPossible values:\n\n\t\t:\"BR/EDR\":\n\t\t:\"LE\":\n\n\t:boolean prepare-authorize:\n\n\t\tTrue if prepare authorization request.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.NotPermitted:\n\t:org.bluez.Error.InvalidValueLength:\n\t:org.bluez.Error.NotAuthorized:"}],"Signals":[],"Properties":[{"Name":"UUID","Type":"string","Docs":"128-bit descriptor UUID.","Flags":[1]},{"Name":"Characteristic","Type":"object","Docs":"Object path of the GATT characteristic the descriptor belongs to.","Flags":[1]},{"Name":"Value","Type":"array{byte}","Docs":"The cached value of the descriptor. This property gets updated only\n\tafter a successful read request, upon which a PropertiesChanged signal\n\twill be emitted.","Flags":[1,5]},{"Name":"Flags","Type":"array{string}","Docs":"Defines how the descriptor value can be used.\n\n\tPossible values:\n\n\t:\"read\":\n\t:\"write\":\n\t:\"encrypt-read\":\n\t:\"encrypt-write\":\n\t:\"encrypt-authenticated-read\":\n\t:\"encrypt-authenticated-write\":\n\t:\"secure-read\" (Server Only):\n\t:\"secure-write\" (Server Only):\n\t:\"authorize\":","Flags":[1]}]}]},{"FileName":"org.bluez.GattManager.rst","Name":"BlueZ D-Bus GattManager API documentation","Description":"GATT Manager allows external applications to register GATT services and\nprofiles.\n\nRegistering a profile allows applications to subscribe to *remote/client*\nservices.\n\nRegistering a service allows applications to publish a *local/server* GATT\nservice, which then becomes available to remote devices. A GATT service is\nrepresented by a D-Bus object hierarchy where the root node corresponds to a\nservice and the child nodes represent characteristics and descriptors that\nbelong to that service. Each node must implement one of\n**org.bluez.GattService(5)**, **org.bluez.GattCharacteristic(5)** or\n**org.bluez.GattDescriptor(5)** interfaces, based on the attribute it\nrepresents. Each node must also implement the standard D-Bus Properties\ninterface to expose their properties. These objects collectively represent a\nGATT service definition.\n\nTo make service registration simple, **bluetoothd(8)** requires that all objects\nthat belong to a GATT service be grouped under a D-Bus Object Manager that\nsolely manages the objects of that service. Hence, the standard\nDBus.ObjectManager interface must be available on the root service path. An\nexample application hierarchy containing two separate GATT services may look\nlike this:\n\n.. code-block::\n\n    -\u003e /com/example\n      |   - org.freedesktop.DBus.ObjectManager\n      |\n      -\u003e /com/example/service0\n      | |   - org.freedesktop.DBus.Properties\n      | |   - org.bluez.GattService1\n      | |\n      | -\u003e /com/example/service0/char0\n      | |     - org.freedesktop.DBus.Properties\n      | |     - org.bluez.GattCharacteristic1\n      | |\n      | -\u003e /com/example/service0/char1\n      |   |   - org.freedesktop.DBus.Properties\n      |   |   - org.bluez.GattCharacteristic1\n      |   |\n      |   -\u003e /com/example/service0/char1/desc0\n      |       - org.freedesktop.DBus.Properties\n      |       - org.bluez.GattDescriptor1\n      |\n      -\u003e /com/example/service1\n        |   - org.freedesktop.DBus.Properties\n        |   - org.bluez.GattService1\n        |\n       -\u003e /com/example/service1/char0\n            - org.freedesktop.DBus.Properties\n            - org.bluez.GattCharacteristic1\n\nWhen a service is registered, **bluetoothd(8)** will automatically obtain\ninformation about all objects using the service's Object Manager. Once a service\nhas been registered, the objects of a service should not be removed. If\n**bluetoothd(8)** receives an InterfacesRemoved signal from a service's Object\nManager, it will immediately unregister the service. Similarly, if the\napplication disconnects from the bus, all of its registered services will be\nautomatically unregistered. InterfacesAdded signals will be ignored.\n\nInterface\n=========\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.GattManager1\n:Object path:\t[variable prefix]/{hci0,hci1,...}","Api":[{"Title":"BlueZ D-Bus GattManager API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.GattManager1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[{"Name":"RegisterApplication","ReturnType":"void","Args":[{"Type":"object","Name":"application"},{"Type":"dict","Name":"options"}],"Errors":["org.bluez.Error.InvalidArguments"],"Docs":"Registers a local GATT services hierarchy as described above\n\t(GATT Server) and/or GATT profiles (GATT Client).\n\n\tThe application object path together with the D-Bus system bus\n\tconnection ID define the identification of the application registering\n\ta GATT based service (**org.bluez.GattService(5)**) and/or profile\n\t(**org.bluez.GattProfile(5)**).\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:"},{"Name":"UnregisterApplication","ReturnType":"void","Args":[{"Type":"object","Name":"application"}],"Errors":[],"Docs":"This unregisters the services and/or profiles that has been previously\n\tregistered using **RegisterApplication()**. The object path parameter\n\tmust match the same value that has been used on registration.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.GattProfile.rst","Name":"BlueZ D-Bus GattProfile API documentation","Description":"Local profile (GATT client) instance. By registering this type of object\nan application effectively indicates support for a specific GATT profile\nand requests automatic connections to be established to devices\nsupporting it.\n\nInterface\n=========\n\n:Service:\t\u003capplication dependent\u003e\n:Interface:\torg.bluez.GattProfile1\n:Object path:\t\u003capplication dependent\u003e","Api":[{"Title":"BlueZ D-Bus GattProfile API documentation","Description":"","Service":"\u003capplication dependent\u003e","Interface":"org.bluez.GattProfile1","ObjectPath":"\u003capplication dependent\u003e","Methods":[{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called when the service daemon\n\tunregisters the profile. The profile can use it to do cleanup tasks.\n\tThere is no need to unregister the profile, because when this method"}],"Signals":[],"Properties":[{"Name":"UUIDs","Type":"array{string}","Docs":"128-bit GATT service UUIDs to auto connect.","Flags":[1]}]}]},{"FileName":"org.bluez.GattService.rst","Name":"BlueZ D-Bus GattService API documentation","Description":"GATT local/server and remote/client services share the same high-level D-Bus\nAPI.\n\nLocal/Server refers to GATT based service exported by a plugin or an external\napplication.\n\nRemote/Client refers to GATT services exported by the peer.\n\nInterface\n=========\n\nClient\n------\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.GattService1\n:Object path:\t[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/serviceXX\n\nServer\n------\n\n:Service:\tunique name\n:Interface:\torg.bluez.GattService1\n:Object path:\tfreely definable","Api":[{"Title":"BlueZ D-Bus GattService API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.GattService1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/serviceXX","Methods":[],"Signals":[],"Properties":[{"Name":"UUID","Type":"string","Docs":"128-bit service UUID.","Flags":[1]},{"Name":"Primary","Type":"boolean","Docs":"Indicates whether or not this GATT service is a primary service. If\n\tfalse, the service is secondary.","Flags":[1]},{"Name":"Device","Type":"object","Docs":"Object path of the Bluetooth device the service belongs to. Only\n\tpresent on services from remote devices.","Flags":[1,5]},{"Name":"Includes","Type":"array{object}","Docs":"Array of object paths representing the included services of this\n\tservice.","Flags":[1,5]}]}]},{"FileName":"org.bluez.Input.rst","Name":"BlueZ D-Bus Input API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Input API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.Input1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[],"Signals":[],"Properties":[{"Name":"ReconnectMode","Type":"string","Docs":"Indicates the Connectability mode of the HID device as defined by the\n\tHID Profile specification, Section 5.4.2.\n\n\tThis mode is based in the two properties HIDReconnectInitiate (see\n\tSection 5.3.4.6) and HIDNormallyConnectable (see Section 5.3.4.14) which\n\tdefine the following four possible values:\n\n\t:\"none\":\n\n\t\tDevice and host are not required to automatically restore the\n\t\tconnection.\n\n\t:\"host\":\n\n\t\tBluetooth HID host restores connection.\n\n\t:\"device\":\n\n\t\tBluetooth HID device restores connection.\n\n\t:\"any\":\n\n\t\tBluetooth HID device shall attempt to restore the lost\n\t\tconnection, but Bluetooth HID Host may also restore the\n\t\tconnection.","Flags":[1]}]}]},{"FileName":"org.bluez.LEAdvertisement.rst","Name":"BlueZ D-Bus LEAdvertisement API documentation","Description":"Advertising packets are structured data which is broadcast on the LE Advertising\nchannels and available for all devices in range.  Because of the limited space\navailable in LE Advertising packets, each packet's contents must be carefully\ncontrolled.\n\nThe service daemon acts as a store for the Advertisement Data which is meant to\nbe sent. It constructs the correct Advertisement Data from the structured\ndata and configured the kernel to send the correct advertisement.\n\nInterface\n=========\n\nSpecifies the Advertisement Data to be broadcast and some advertising\nparameters.  Properties which are not present will not be included in the\ndata.  Required advertisement data types will always be included.\nAll UUIDs are 128-bit versions in the API, and 16 or 32-bit\nversions of the same UUID will be used in the advertising data as appropriate.\n\n:Service:\torg.bluez\n:Interface:\torg.bluez.LEAdvertisement1\n:Object path:\tfreely definable","Api":[{"Title":"BlueZ D-Bus LEAdvertisement API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.LEAdvertisement1","ObjectPath":"freely definable","Methods":[{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called when the service daemon removes the\n\tAdvertisement. A client can use it to do cleanup tasks. There is no\n\tneed to call **UnregisterAdvertisement()** because when this method"}],"Signals":[],"Properties":[{"Name":"Type","Type":"string","Docs":"Determines the type of advertising packet requested.\n\n\tPossible values:\n\n\t:\"broadcast\":\n\t:\"peripheral\":","Flags":[1]},{"Name":"ServiceUUIDs","Type":"array{string}","Docs":"List of UUIDs to include in the \"Service UUID\" field of the Advertising\n\tData.","Flags":null},{"Name":"ManufacturerData","Type":"dict","Docs":"Manufacturer Data fields to include in the Advertising Data.  Keys are\n\tthe Manufacturer ID to associate with the data.","Flags":null},{"Name":"SolicitUUIDs","Type":"array{string}","Docs":"Array of UUIDs to include in \"Service Solicitation\" Advertisement Data.","Flags":null},{"Name":"ServiceData","Type":"dict","Docs":"Service Data elements to include. The keys are the UUID to associate\n\twith the data.","Flags":null},{"Name":"Includes","Type":"array{string}","Docs":"List of features to be included in the advertising packet.\n\n\tPossible values:\n\n\tSee **org.bluez.LEAdvertisingManager(5)** **SupportedIncludes**\n\tproperty.","Flags":null},{"Name":"LocalName","Type":"string","Docs":"Local name to be used in the advertising report. If the string is too\n\tbig to fit into the packet it will be truncated.\n\n\tIf this property is available 'local-name' cannot be present in the\n\t**Includes**.","Flags":null},{"Name":"Appearance","Type":"uint16","Docs":"Appearance to be used in the advertising report.\n\n\tPossible values: as found on GAP Service.","Flags":null},{"Name":"Duration","Type":"uint16_t","Docs":"Rotation duration of the advertisement in seconds. If there are other\n\tapplications advertising no duration is set the default is 2 seconds.","Flags":null},{"Name":"Timeout","Type":"uint16_t","Docs":"Timeout of the advertisement in seconds. This defines the lifetime of\n\tthe advertisement.","Flags":null}]}]},{"FileName":"org.bluez.LEAdvertisingManager.rst","Name":"BlueZ D-Bus LEAvertisingManager API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus LEAvertisingManager API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.LEAdvertisingManager1","ObjectPath":"/org/bluez/{hci0,hci1,...}","Methods":[{"Name":"RegisterAdvertisement","ReturnType":"void","Args":[{"Type":"object","Name":"advertisement"},{"Type":"dict","Name":"options"}],"Errors":["org.bluez.Error.InvalidArguments"],"Docs":"Registers an advertisement object to be sent over the LE Advertising\n\tchannel.  The service must implement **org.bluez.LEAdvertisement(5)**\n\tinterface.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\n\t\tIndicates that the object has invalid or conflicting properties.\n\n\t:org.bluez.Error.AlreadyExists:\n\n\t\tIndicates the object is already registered.\n\n\t:org.bluez.Error.InvalidLength:\n\n\t\tIndicates that the data provided generates a data packet which\n\t\tis too long\n\n\t:org.bluez.Error.NotPermitted:\n\n\t\tIndicates the maximum number of advertisement instances has\n\t\tbeen reached."},{"Name":"UnregisterAdvertisement","ReturnType":"void","Args":[{"Type":"object","Name":"advertisement"}],"Errors":[],"Docs":"Unregisters an advertisement that has been previously registered using\n\t**RegisterAdvertisement()**.  The object path parameter must match the\n\tsame value that has been used on registration.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:"}],"Signals":[],"Properties":[{"Name":"ActiveInstances","Type":"byte","Docs":"Number of active advertising instances.","Flags":[1]},{"Name":"SupportedInstances","Type":"byte","Docs":"Number of available advertising instances.","Flags":[1]},{"Name":"SupportedIncludes","Type":"array{string}","Docs":"List of supported system includes.\n\n\tPossible values:\n\n\t:\"tx-power\":\n\t:\"appearance\":\n\t:\"local-name\":\n\t:\"rsi\":","Flags":[1]}]}]},{"FileName":"org.bluez.Media.rst","Name":"BlueZ D-Bus Media API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Media API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.Media1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[{"Name":"RegisterEndpoint","ReturnType":"void","Args":[{"Type":"object","Name":"endpoint"},{"Type":"dict","Name":"properties"}],"Errors":[],"Docs":"Register a local end point to sender, the sender can register as many\n\tend points as it likes.\n\n\tNote: If the sender disconnects the end points are automatically\n\tunregistered.\n\n\tpossible properties:\n\n\t:string UUID:\n\n\t\tUUID of the profile which the endpoint is for.\n\n\t\tUUID must be in the list of SupportedUUIDS.\n\n\t:byte Codec:\n\n\t\tAssigned number of codec that the endpoint implements. The\n\t\tvalues should match the profile specification which is\n\t\tindicated by the UUID.\n\n\t:uint32_t Vendor [Optional]:\n\n\t\tVendor-specific Company ID, Codec ID tuple that the endpoint\n\t\timplements.\n\n\t\tIt shall be set to appropriate value when Vendor Specific Codec\n\t\t(0xff) is used.\n\n\t:array{byte} Capabilities:\n\n\t\tCapabilities blob, it is used as it is so the size and byte\n\t\torder must match.\n\n\t:array{byte} Metadata [Optional]:\n\n\t\tMetadata blob, it is used as it is so the size and byte order\n\t\tmust match.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:\n\n\t\temitted when interface for the end-point is disabled"},{"Name":"RegisterPlayer","ReturnType":"void","Args":[{"Type":"object","Name":"player"},{"Type":"dict","Name":"properties"}],"Errors":[],"Docs":"Register a media player object to sender, the sender can register as\n\tmany objects as it likes.\n\n\tObject must implement at least org.mpris.MediaPlayer2.Player as defined\n\tin MPRIS 2.2 spec:\n\n\t\thttp://specifications.freedesktop.org/mpris-spec/latest/\n\n\tNote: If the sender disconnects its objects are automatically\n\tunregistered.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:"},{"Name":"UnregisterPlayer","ReturnType":"void","Args":[{"Type":"object","Name":"player"}],"Errors":[],"Docs":"Unregister sender media player."},{"Name":"RegisterApplication","ReturnType":"void","Args":[{"Type":"object","Name":"root"},{"Type":"dict","Name":"options"}],"Errors":["org.bluez.Error.InvalidArguments"],"Docs":"Register endpoints an player objects within root object which must\n\timplement ObjectManager.\n\n\tThe application object path together with the D-Bus system bus\n\tconnection ID define the identification of the application.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:"},{"Name":"UnregisterApplication","ReturnType":"void","Args":[{"Type":"object","Name":"application"}],"Errors":[],"Docs":"This unregisters the services that has been previously registered. The\n\tobject path parameter must match the same value that has been used on\n\tregistration.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:"}],"Signals":[],"Properties":[{"Name":"SupportedUUIDs","Type":"array{string}","Docs":"List of 128-bit UUIDs that represents the supported Endpoint\n\tregistration.","Flags":[1]}]}]},{"FileName":"org.bluez.MediaControl.rst","Name":"BlueZ D-Bus MediaControl API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus MediaControl API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.MediaControl1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[{"Name":"Play","ReturnType":"void","Args":[],"Errors":[],"Docs":"Resume playback."},{"Name":"Pause","ReturnType":"void","Args":[],"Errors":[],"Docs":"Pause playback."},{"Name":"Stop","ReturnType":"void","Args":[],"Errors":[],"Docs":"Stop playback."},{"Name":"Next","ReturnType":"void","Args":[],"Errors":[],"Docs":"Next item."},{"Name":"Previous","ReturnType":"void","Args":[],"Errors":[],"Docs":"Previous item."},{"Name":"VolumeUp","ReturnType":"void","Args":[],"Errors":[],"Docs":"Adjust remote volume one step up"},{"Name":"VolumeDown","ReturnType":"void","Args":[],"Errors":[],"Docs":"Adjust remote volume one step down"},{"Name":"FastForward","ReturnType":"void","Args":[],"Errors":[],"Docs":"Fast forward playback, this action is only stopped when another method\n\tin this interface is called."},{"Name":"Rewind","ReturnType":"void","Args":[],"Errors":[],"Docs":"Rewind playback, this action is only stopped when another method in"}],"Signals":[],"Properties":[{"Name":"Connected","Type":"boolean","Docs":"","Flags":[1]},{"Name":"Player","Type":"object","Docs":"Addressed Player object path.","Flags":[1,5]}]}]},{"FileName":"org.bluez.MediaEndpoint.rst","Name":"BlueZ D-Bus MediaEndpoint API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus MediaEndpoint API documentation","Description":"","Service":"unique name (Server role)","Interface":"org.bluez.MediaEndpoint1","ObjectPath":"freely definable (Server role)","Methods":[{"Name":"SetConfiguration","ReturnType":"void","Args":[{"Type":"object","Name":"transport"},{"Type":"dict","Name":"properties"}],"Errors":[],"Docs":"Set configuration for the transport.\n\n\t:object transport:\n\n\t\tConfigured transport object.\n\n\t:dict properties:\n\n\t\tConfigured **org.bluez.MediaTransport(5)** properties.\n\n\tFor client role transport must be set with a server endpoint\n\tobject which will be configured and the properties must\n\tcontain the following properties:\n\n\t:array{byte} Capabilities [Mandatory]:\n\n\t\tSee Capabilities property.\n\n\t:array{byte} Metadata [ISO only]:\n\n\t\tSee Metadata property.\n\n\t:dict QoS [ISO only]:\n\n\t\tSee **org.bluez.MediaTransport(5)** QoS property."},{"Name":"SelectConfiguration","ReturnType":"array{byte}","Args":[{"Type":"array{byte}","Name":"capabilities"}],"Errors":[],"Docs":"Select preferable configuration from the supported capabilities.\n\n\tReturns a configuration which can be used to setup a transport, see\n\t**org.bluez.MediaTransport(5)** for possible values.\n\n\tNote: There is no need to cache the selected configuration since on\n\tsuccess the configuration is send back as parameter of SetConfiguration."},{"Name":"SelectProperties","ReturnType":"dict","Args":[{"Type":"dict","Name":"capabilities"}],"Errors":[],"Docs":"Select BAP unicast configuration from the supported capabilities:\n\n\t:object Endpoint:\n\n\t:array{byte} Capabilities:\n\n\t:array{byte} Metadata:\n\n\t:uint32 Locations:\n\n\t:uint32_t ChannelAllocation:\n\n\t:dict QoS:\n\n\t\t:byte Framing:\n\t\t:byte PHY:\n\t\t:uint16 MaximumLatency:\n\t\t:uint32 MinimumDelay:\n\t\t:uint32 MaximumDelay:\n\t\t:uint32 PreferredMinimumDelay:\n\t\t:uint32 PreferredMaximumDelay:\n\n\tSee `MediaEndpoint Properties`_ for their possible values.\n\n\tReturns a configuration which can be used to setup a transport:\n\n\t:array{byte} Capabilities:\n\t:array{byte} Metadata [optional]:\n\t:dict QoS:\n\n\tSee `SetConfiguration`_ for their possible values.\n\n\tNote: There is no need to cache the selected properties since on\n\tsuccess the configuration is send back as parameter of SetConfiguration."},{"Name":"ClearConfiguration","ReturnType":"void","Args":[{"Type":"object","Name":"transport"}],"Errors":[],"Docs":"Clear transport configuration."},{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called when the service daemon unregisters the\n\tendpoint. An endpoint can use it to do cleanup tasks. There is no need\n\tto unregister the endpoint, because when this method gets called it has\n\talready been unregistered."}],"Signals":[],"Properties":[{"Name":"UUID","Type":"string","Docs":"UUID of the profile which the endpoint is for.","Flags":[1,5]},{"Name":"Codec","Type":"byte","Docs":"Assigned number of codec that the endpoint implements.\n\tThe values should match the profile specification which is indicated by\n\tthe UUID.","Flags":[1,5]},{"Name":"Capabilities","Type":"array{byte}","Docs":"Capabilities blob, it is used as it is so the size and byte order must\n\tmatch.","Flags":[1,5]},{"Name":"Device","Type":"object","Docs":"Device object which the endpoint is belongs to.","Flags":[1,5]},{"Name":"DelayReporting","Type":"bool","Docs":"Indicates if endpoint supports Delay Reporting.","Flags":[1,5]}]}]},{"FileName":"org.bluez.MediaFolder.rst","Name":"BlueZ D-Bus MediaFolder API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus MediaFolder API documentation","Description":"","Service":"unique name (Target role)","Interface":"org.bluez.MediaFolder1","ObjectPath":"freely definable (Target role)","Methods":[{"Name":"Search","ReturnType":"object","Args":[{"Type":"string","Name":"value"},{"Type":"dict","Name":"filter"}],"Errors":[],"Docs":"Return a folder object containing the search result.\n\n\tTo list the items found use the folder object returned and pass to\n\tChangeFolder.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"ListItems","ReturnType":"array{objects, properties}","Args":[{"Type":"dict","Name":"filter"}],"Errors":[],"Docs":"Return a list of items found\n\n\tPossible Errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"ChangeFolder","ReturnType":"void","Args":[{"Type":"object","Name":"folder"}],"Errors":[],"Docs":"Change current folder.\n\n\tNote: By changing folder the items of previous folder might be destroyed\n\tand have to be listed again, the exception is NowPlaying folder which\n\tshould be always present while the player is active.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:"}],"Signals":[],"Properties":[{"Name":"NumberOfItems","Type":"uint32","Docs":"Number of items in the folder","Flags":[1]},{"Name":"Name","Type":"string","Docs":"Folder name:\n\n\tPossible values:\n\n\t:\"/Filesystem/...\":\n\n\t\tFilesystem scope\n\n\t:\"/NowPlaying/...\":\n\n\t\tNowPlaying scope\n\n\tNote: /NowPlaying folder might not be listed if player is stopped,\n\tfolders created by Search are virtual so once another Search is perform\n\tor the folder is changed using ChangeFolder it will no longer be listed.","Flags":[1]}]}]},{"FileName":"org.bluez.MediaItem.rst","Name":"BlueZ D-Bus MediaItem API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus MediaItem API documentation","Description":"","Service":"unique name (Target role)","Interface":"org.bluez.MediaItem1","ObjectPath":"freely definable (Target role)","Methods":[{"Name":"Play","ReturnType":"void","Args":[],"Errors":[],"Docs":"Play item\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"AddtoNowPlaying","ReturnType":"void","Args":[],"Errors":[],"Docs":"Add item to now playing list\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:"}],"Signals":[],"Properties":[{"Name":"Player","Type":"object","Docs":"Player object path the item belongs to","Flags":[1]},{"Name":"Name","Type":"string","Docs":"Item displayable name","Flags":[1]},{"Name":"Type","Type":"string","Docs":"Item type\n\n\tPossible values: \"video\", \"audio\", \"folder\"","Flags":[1]},{"Name":"FolderType","Type":"string","Docs":"Folder type.\n\n\tPossible values: \"mixed\", \"titles\", \"albums\", \"artists\"\n\n\tAvailable if property Type is \"Folder\"","Flags":[1,5]},{"Name":"Playable","Type":"boolean","Docs":"Indicates if the item can be played\n\n\tAvailable if property Type is \"folder\"","Flags":[1,5]},{"Name":"Metadata","Type":"dict","Docs":"Item metadata.\n\n\tPossible values:\n\n\t:string Title:\n\n\t\tItem title name\n\n\t\tAvailable if property Type is \"audio\" or \"video\"\n\n\t:string Artist:\n\n\t\tItem artist name\n\n\t\tAvailable if property Type is \"audio\" or \"video\"\n\n\t:string Album:\n\n\t\tItem album name\n\n\t\tAvailable if property Type is \"audio\" or \"video\"\n\n\t:string Genre:\n\n\t\tItem genre name\n\n\t\tAvailable if property Type is \"audio\" or \"video\"\n\n\t:uint32 NumberOfTracks:\n\n\t\tItem album number of tracks in total\n\n\t\tAvailable if property Type is \"audio\" or \"video\"\n\n\t:uint32 Number:\n\n\t\tItem album number\n\n\t\tAvailable if property Type is \"audio\" or \"video\"\n\n\t:uint32 Duration:\n\n\t\tItem duration in milliseconds\n\n\t\tAvailable if property Type is \"audio\" or \"video\"","Flags":[1]}]}]},{"FileName":"org.bluez.MediaPlayer.rst","Name":"BlueZ D-Bus MediaPlayer API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus MediaPlayer API documentation","Description":"","Service":"org.bluez (Controller role)","Interface":"org.bluez.MediaPlayer1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/playerX","Methods":[{"Name":"Play","ReturnType":"void","Args":[],"Errors":[],"Docs":"Resume playback.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Pause","ReturnType":"void","Args":[],"Errors":[],"Docs":"Pause playback.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Stop","ReturnType":"void","Args":[],"Errors":[],"Docs":"Stop playback.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Next","ReturnType":"void","Args":[],"Errors":[],"Docs":"Next item.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Previous","ReturnType":"void","Args":[],"Errors":[],"Docs":"Previous item.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"FastForward","ReturnType":"void","Args":[],"Errors":[],"Docs":"Fast forward playback, this action is only stopped when another method\n\tin this interface is called.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Rewind","ReturnType":"void","Args":[],"Errors":[],"Docs":"Rewind playback, this action is only stopped when another method in\n\tthis interface is called.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Press","ReturnType":"void","Args":[{"Type":"byte","Name":"avc_key"}],"Errors":[],"Docs":"Press a specific key to send as passthrough command. The key will be\n\treleased automatically. Use Hold() instead if the intention is to hold\n\tdown the key.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Hold","ReturnType":"void","Args":[{"Type":"byte","Name":"avc_key"}],"Errors":[],"Docs":"Press and hold a specific key to send as passthrough command. It is\n\tyour responsibility to make sure that Release() is called after calling\n\tthis method. The held key will also be released when any other method\n\tin this interface is called.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.Failed:"},{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"Release the previously held key invoked using Hold().\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotSupported:"}],"Signals":[],"Properties":[{"Name":"Equalizer","Type":"string","Docs":"Indicates Player Equalizer setting.\n\n\tPossible values:\n\n\t:\"off\":\n\t:\"on\":","Flags":[3]},{"Name":"Repeat","Type":"string","Docs":"Indicates Player Repeat setting.\n\n\tPossible values:\n\n\t:\"off\":\n\t:\"singletrack\":\n\t:\"alltracks\":\n\t:\"group\":","Flags":[3]},{"Name":"Shuffle","Type":"string","Docs":"Indicates Player Suffle setting.\n\n\tPossible values:\n\n\t:\"off\":\n\t:\"alltracks\":\n\t:\"group\":","Flags":[3]},{"Name":"Scan","Type":"string","Docs":"Indicates Player Scan setting.\n\n\tPossible values:\n\n\t:\"off\":\n\t:\"alltracks\":\n\t:\"group\":","Flags":[3]},{"Name":"Status","Type":"string","Docs":"Indicates Player Status setting.\n\n\tPossible status:\n\n\t:\"playing\":\n\t:\"stopped\":\n\t:\"paused\":\n\t:\"forward-seek\":\n\t:\"reverse-seek\":\n\t:\"error\":","Flags":[1]},{"Name":"Position","Type":"uint32","Docs":"Playback position in milliseconds. Changing the position may generate\n\tadditional events that will be sent to the remote device. When position\n\tis 0 it means the track is starting and when it's greater than or equal\n\tto track's duration the track has ended.\n\n\tNote that even if duration is not available in metadata it's possible\n\tto signal its end by setting position to the maximum uint32 value.","Flags":[1]},{"Name":"Track","Type":"dict","Docs":"Track metadata.\n\n\tPossible values:\n\n\t:string Title:\n\n\t\tTrack title name\n\n\t:string Artist:\n\n\t\tTrack artist name\n\n\t:string Album:\n\n\t\tTrack album name\n\n\t:string Genre:\n\n\t\tTrack genre name\n\n\t:uint32 NumberOfTracks:\n\n\t\tNumber of tracks in total\n\n\t:uint32 TrackNumber:\n\n\t\tTrack number\n\n\t:uint32 Duration:\n\n\t\tTrack duration in milliseconds","Flags":[1]},{"Name":"Device","Type":"object","Docs":"Device object path.","Flags":[1]},{"Name":"Name","Type":"string","Docs":"Player name","Flags":[1]},{"Name":"Type","Type":"string","Docs":"Player type\n\n\tPossible values:\n\n\t\t\"Audio\"\n\t\t\"Video\"\n\t\t\"Audio Broadcasting\"\n\t\t\"Video Broadcasting\"","Flags":[1]},{"Name":"Subtype","Type":"string","Docs":"Player subtype\n\n\tPossible values:\n\n\t\t\"Audio Book\"\n\t\t\"Podcast\"","Flags":[1]},{"Name":"Browsable","Type":"boolean","Docs":"If present indicates the player can be browsed using MediaFolder\n\tinterface.\n\n\tPossible values:\n\n\t:True:\n\n\t\tSupported and active\n\n\t:False:\n\n\t\tSupported but inactive\n\n\tNote: If supported but inactive clients can enable it by using\n\tMediaFolder interface but it might interfere in the playback of other\n\tplayers.","Flags":[1]},{"Name":"Searchable","Type":"boolean","Docs":"If present indicates the player can be searched using MediaFolder\n\tinterface.\n\n\tPossible values:\n\n\t:True:\n\n\t\tSupported and active\n\n\t:False:\n\n\t\tSupported but inactive\n\n\tNote: If supported but inactive clients can enable it by using\n\tMediaFolder interface but it might interfere in the playback of other\n\tplayers.","Flags":[1]},{"Name":"Playlist","Type":"object","Docs":"Playlist object path.","Flags":null}]}]},{"FileName":"org.bluez.MediaTransport.rst","Name":"BlueZ D-Bus MediaTransport API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus MediaTransport API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.MediaTransport1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX/fdX","Methods":[{"Name":"Acquire","ReturnType":"fd, uint16, uint16","Args":[],"Errors":[],"Docs":"Acquire transport file descriptor and the MTU for read and write\n\trespectively.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotAuthorized:\n\t:org.bluez.Error.Failed:"},{"Name":"TryAcquire","ReturnType":"fd, uint16, uint16","Args":[],"Errors":[],"Docs":"Acquire transport file descriptor only if the transport is in \"pending\"\n\tstate at the time the message is received by BlueZ. Otherwise no request\n\twill be sent to the remote device and the function will just fail with\n\torg.bluez.Error.NotAvailable.\n\n\tPossible Errors:\n\n\t:org.bluez.Error.NotAuthorized:\n\t:org.bluez.Error.Failed:\n\t:org.bluez.Error.NotAvailable:"}],"Signals":[],"Properties":[{"Name":"Device","Type":"object","Docs":"Device object which the transport is connected to.","Flags":[1]},{"Name":"UUID","Type":"string","Docs":"UUID of the profile which the transport is for.","Flags":[1]},{"Name":"Codec","Type":"byte","Docs":"Assigned number of codec that the transport support.\n\tThe values should match the profile specification which is indicated by\n\tthe UUID.","Flags":[1]},{"Name":"Configuration","Type":"array{byte}","Docs":"Configuration blob, it is used as it is so the size and byte order must\n\tmatch.","Flags":[1]},{"Name":"State","Type":"string","Docs":"Indicates the state of the transport. Possible values are:\n\n\t:\"idle\": not streaming\n\t:\"pending\": streaming but not acquired\n\t:\"active\": streaming and acquired","Flags":[1]},{"Name":"Delay","Type":"uint16","Docs":"Transport delay in 1/10 of millisecond, this property is only writeable\n\twhen the transport was acquired by the sender.","Flags":[3,5]},{"Name":"Volume","Type":"uint16","Docs":"Indicates volume level of the transport, this property is only writeable\n\twhen the transport was acquired by the sender.\n\n\tPossible Values: 0-127","Flags":[3,5]},{"Name":"Endpoint","Type":"object","Docs":"Endpoint object which the transport is associated with.","Flags":[1,5,4]}]}]},{"FileName":"org.bluez.Network.rst","Name":"BlueZ D-Bus Network API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Network API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.Network1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[{"Name":"Connect","ReturnType":"string","Args":[{"Type":"string","Name":"uuid"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.NotSupported","org.bluez.Error.InProgress"],"Docs":"Connects to the network device and return the network interface name.\n\n\tPossible uuid values:\n\n\t:\"panu\", \"00001115-0000-1000-8000-00805f9b34fb\":\n\n\t\tPersonal Network User role.\n\n\t:\"nap\", \"00001116-0000-1000-8000-00805f9b34fb\":\n\n\t\tNetwork Access Point role.\n\n\t:\"gn\", \"00001117-0000-1000-8000-00805f9b34fb\":\n\n\t\tGroup Network role.\n\n\tThe connection will be closed and network device released either upon\n\tcalling **Disconnect()** or when the client disappears from the\n\tmessage bus.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.NotSupported:\n\t:org.bluez.Error.InProgress:\n\t:org.bluez.Error.Failed:"},{"Name":"Disconnect","ReturnType":"void","Args":[],"Errors":[],"Docs":"Disconnects from the network device.\n\n\tTo abort a connection attempt in case of errors or timeouts in the\n\tclient it is fine to call this method.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Failed:"}],"Signals":[],"Properties":[{"Name":"Connected","Type":"boolean","Docs":"Indicates if the device is connected.","Flags":[1]},{"Name":"Interface","Type":"string","Docs":"Indicates the network interface name when available.","Flags":[1,5]},{"Name":"UUID","Type":"string","Docs":"Indicates the connection role when available.","Flags":[1,5]}]}]},{"FileName":"org.bluez.NetworkServer.rst","Name":"BlueZ D-Bus NetworkServer API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus NetworkServer API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.NetworkServer1","ObjectPath":"/org/bluez/{hci0,hci1,...}","Methods":[{"Name":"Register","ReturnType":"void","Args":[{"Type":"string","Name":"uuid"},{"Type":"string","Name":"bridge"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.AlreadyExists"],"Docs":"Registers server for the provided UUID.\n\n\tEvery new connection to this server will be added the bridge interface.\n\n\tPossible uuid values:\n\n\t:\"panu\", \"00001115-0000-1000-8000-00805f9b34fb\":\n\n\t\tPersonal Network User role.\n\n\t:\"nap\", \"00001116-0000-1000-8000-00805f9b34fb\":\n\n\t\tNetwork Access Point role.\n\n\t:\"gn\", \"00001117-0000-1000-8000-00805f9b34fb\":\n\n\t\tGroup Network role.\n\n\tInitially no network server SDP is provided. Only after this method a\n\tSDP record will be available and the BNEP server will be ready for\n\tincoming connections.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:\n\t:org.bluez.Error.Failed:"},{"Name":"Unregister","ReturnType":"void","Args":[{"Type":"string","Name":"uuid"}],"Errors":[],"Docs":"Unregisters the server for provided UUID which was previously\n\tregistered with **Register()** method.\n\n\tAll servers will be automatically unregistered when the calling\n\tapplication terminates.\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.Profile.rst","Name":"BlueZ D-Bus Profile API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus Profile API documentation","Description":"","Service":"unique name","Interface":"org.bluez.Profile1","ObjectPath":"freely definable","Methods":[{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called when the service daemon unregisters the profile.\n\tA profile can use it to do cleanup tasks. There is no need to unregister\n\tthe profile, because when this method gets called it has already been\n\tunregistered."},{"Name":"NewConnection","ReturnType":"void","Args":[{"Type":"object","Name":"device"},{"Type":"int32","Name":"fd"},{"Type":"dict","Name":"fd_properties"}],"Errors":[],"Docs":"This method gets called when a new service level connection has been\n\tmade and authorized.\n\n\tPossible fd_properties values:\n\n\t:uint16 Version [optional]:\n\n\t\tProfile version.\n\n\t:uint16 Features [optional]:\n\n\t\tProfile features.\n\n\tPossible errors:\n\n\t:org.bluez.Error.Rejected:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.ProfileManager.rst","Name":"BlueZ D-Bus ProfileManager API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus ProfileManager API documentation","Description":"","Service":"org.bluez","Interface":"org.bluez.ProfileManager1","ObjectPath":"/org/bluez","Methods":[{"Name":"RegisterProfile","ReturnType":"void","Args":[{"Type":"object","Name":"profile"},{"Type":"string","Name":"uuid"},{"Type":"dict","Name":"options"}],"Errors":["org.bluez.Error.InvalidArguments"],"Docs":"Registers profile agent.\n\n\tThe object path defines the path of the profile that will be called\n\twhen there is a connection and must implement **org.bluez.Profile(5)**\n\tinterface.\n\n\tIf an application disconnects from the bus all its registered profiles\n\twill be removed.\n\n\tPossible uuid values:\n\n\t:\"0000111f-0000-1000-8000-00805f9b34fb\":\n\n\t\tHFP AG, default profile Version is 1.7, profile Features is\n\t\t0b001001 and RFCOMM channel is 13. Authentication is required.\n\n\t:\"0000111e-0000-1000-8000-00805f9b34fb\":\n\n\t\tHFP HS, default profile Version is 1.7, profile Features is\n\t\t0b000000 and RFCOMM channel is 7. Authentication is required.\n\n\t:\"00001112-0000-1000-8000-00805f9b34fb\":\n\n\t\tHSP AG, default profile Version is 1.2, RFCOMM channel is 12 and\n\t\tAuthentication is required. Does not support any Features,\n\t\toption is ignored.\n\n\t:\"00001108-0000-1000-8000-00805f9b34fb\":\n\n\t\tHSP HS, default profile Version is 1.2, profile Features is 0b0\n\t\tand RFCOMM channel is 6. Authentication is required.\n\t\tFeatures is one bit value, specify capability of Remote Audio\n\t\tVolume Control (by default turned off).\n\n\t:\"\u003cvendor UUID\u003e\":\n\n\t\tVendor defined UUID, no defaults, must set options.\n\n\tPossible options values:\n\n\t:string Name:\n\n\t\tHuman readable name for the profile\n\n\t:string Service:\n\n\t\tThe primary service class UUID (if different from the actual\n\t\tprofile UUID).\n\n\t:string Role:\n\n\t\tFor asymmetric profiles that do not have UUIDs available to\n\t\tuniquely identify each side this parameter allows specifying the\n\t\tprecise local role.\n\n\t\tPossible values:\n\n\t\t:\"client\":\n\t\t:\"server\":\n\n\t:uint16 Channel:\n\n\t\tRFCOMM channel number that is used for client and server UUIDs.\n\n\t\tIf applicable it will be used in the SDP record as well.\n\n\t:uint16 PSM:\n\n\t\tPSM number that is used for client and server UUIDs.\n\n\t\tIf applicable it will be used in the SDP record as well.\n\n\t:boolean RequireAuthentication:\n\n\t\tPairing is required before connections will be established.\n\t\tNo devices will be connected if not paired.\n\n\t:boolean RequireAuthorization:\n\n\t\tRequest authorization before any connection will be established.\n\n\t:boolean AutoConnect:\n\n\t\tIn case of a client UUID this will force connection of the\n\t\tRFCOMM or L2CAP channels when a remote device is connected.\n\n\t:string ServiceRecord:\n\n\t\tProvide a manual SDP record.\n\n\t:uint16 Version:\n\n\t\tProfile version (for SDP record)\n\n\t:uint16 Features:\n\n\t\tProfile features (for SDP record)\n\n\tPossible errors:\n\n\t:org.bluez.Error.InvalidArguments:\n\t:org.bluez.Error.AlreadyExists:"},{"Name":"UnregisterProfile","ReturnType":"void","Args":[{"Type":"object","Name":"profile"}],"Errors":[],"Docs":"Unregisters profile object that has been previously registered using\n\t**RegisterProfile**.\n\n\tThe object path parameter must match the same value that has been used\n\ton registration.\n\n\tPossible errors:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.Agent.rst","Name":"BlueZ D-Bus OBEX Agent API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX Agent API documentation","Description":"","Service":"unique name","Interface":"org.bluez.obex.Agent1","ObjectPath":"freely definable","Methods":[{"Name":"Release","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called when **obexd(8)** daemon unregisters the agent.\n\tAn agent can use it to do cleanup tasks. There is no need to unregister\n\tthe agent, because when this method gets called it has already been\n\tunregistered."},{"Name":"AuthorizePush","ReturnType":"string","Args":[{"Type":"object","Name":"transfer"}],"Errors":["org.bluez.obex.Error.Rejected"],"Docs":"This method gets called when the **obexd(8)** needs to accept/reject a\n\tBluetooth object push request.\n\n\tReturns the full path (including the filename) or the folder name\n\tsuffixed with '/' where the object shall be stored.\n\n\tThe transfer object, see **org.bluez.obex.Transfer(5)** will contain a\n\tFilename property that contains the default location and name that can\n\tbe returned.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.Rejected:\n\t:org.bluez.obex.Error.Canceled:"},{"Name":"Cancel","ReturnType":"void","Args":[],"Errors":[],"Docs":"This method gets called to indicate that the agent request failed before"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.AgentManager.rst","Name":"BlueZ D-Bus OBEX AgentManager API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX AgentManager API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.AgentManager1","ObjectPath":"/org/bluez/obex","Methods":[],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.Client.rst","Name":"BlueZ D-Bus OBEX Client API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX Client API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.Client1","ObjectPath":"/org/bluez/obex","Methods":[{"Name":"CreateSession","ReturnType":"object","Args":[{"Type":"string","Name":"destination"},{"Type":"dict","Name":"args"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Connects to the destination address and then proceed to create an OBEX\n\tsession object which implements **org.bluez.obex.Session(5)** interface.\n\n\tThe last parameter is a dictionary to hold optional or type-specific\n\tparameters.\n\n\tPossible args values:\n\n\t:string Target:\n\n\t\tType of session to be created.\n\n\t\tPossible values:\n\n\t\t:\"ftp\":\n\t\t:\"map\":\n\t\t:\"opp\":\n\t\t:\"pbap\":\n\t\t:\"sync\":\n\n\t:string Source:\n\n\t\tLocal address to be used.\n\n\t:byte Channel:\n\n\t\tChannel to be used.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"RemoveSession","ReturnType":"void","Args":[{"Type":"object","Name":"session"}],"Errors":[],"Docs":"Disconnects and removes session previously created by\n\t**CreateSession()** aborting any pending transfers.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.FileTransfer.rst","Name":"BlueZ D-Bus OBEX FileTransfer API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX FileTransfer API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.FileTransfer1","ObjectPath":"[Session object path]","Methods":[{"Name":"ChangeFolder","ReturnType":"void","Args":[{"Type":"string","Name":"folder"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Changes the current folder of the remote device.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"CreateFolder","ReturnType":"void","Args":[{"Type":"string","Name":"folder"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Creates a new folder in the remote device.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"ListFolder","ReturnType":"array{dict}","Args":[],"Errors":[],"Docs":"Returns a dictionary containing information about the current folder\n\tcontent.\n\n\tPossible return values:\n\n\t:string Name:\n\n\t\tObject name in UTF-8 format.\n\n\t:string Type:\n\n\t\tEither \"folder\" or \"file\".\n\n\t:uint64 Size:\n\n\t\tObject size or number of items in folder.\n\n\t:string Permission:\n\n\t\tGroup, owner and other permission.\n\n\t:uint64 Modified:\n\n\t\tLast change.\n\n\t:uint64 Accessed:\n\n\t\tLast access.\n\n\t:uint64 Created:\n\n\t\tCreation date.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.Failed:"},{"Name":"GetFile","ReturnType":"object, dict","Args":[{"Type":"string","Name":"targetfile"},{"Type":"string","Name":"sourcefile"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Copies the contents of the source file (from remote device) to the\n\ttarget file (on local filesystem).\n\n\tIf an empty target file is given, a name will be automatically generated\n\tfor the temporary file.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or\n\tif the operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"PutFile","ReturnType":"object, dict","Args":[{"Type":"string","Name":"sourcefile"},{"Type":"string","Name":"targetfile"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Copies the contents of the source file (from local filesystem) to the\n\ttarget file (on remote device).\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"CopyFile","ReturnType":"void","Args":[{"Type":"string","Name":"sourcefile"},{"Type":"string","Name":"targetfile"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Copies the contents from source file to target file on the remote\n\tdevice.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"MoveFile","ReturnType":"void","Args":[{"Type":"string","Name":"sourcefile"},{"Type":"string","Name":"targetfile"}],"Errors":[],"Docs":"Moves a file within the remote device from source file to the target\n\tfile.\n\n\tPossible errors:\n\n\t;org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"Delete","ReturnType":"void","Args":[{"Type":"string","Name":"file"}],"Errors":[],"Docs":"Deletes the specified file/folder.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.Message.rst","Name":"BlueZ D-Bus OBEX Message API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX Message API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.Message1","ObjectPath":"[Session object path]/message{#}","Methods":[{"Name":"Get","ReturnType":"object, dict","Args":[{"Type":"string","Name":"targetfile"},{"Type":"boolean","Name":"attachment"}],"Errors":[],"Docs":"Download message and store it in the target file.\n\n\tIf an empty target file is given, a temporary file will be automatically\n\tgenerated.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"}],"Signals":[],"Properties":[{"Name":"Folder","Type":"string","Docs":"Folder which the message belongs to","Flags":[1]},{"Name":"Subject","Type":"string","Docs":"Message subject","Flags":[1]},{"Name":"Timestamp","Type":"string","Docs":"Message timestamp","Flags":[1]},{"Name":"Sender","Type":"string","Docs":"Message sender name","Flags":[1]},{"Name":"SenderAddress","Type":"string","Docs":"Message sender address","Flags":[1]},{"Name":"ReplyTo","Type":"string","Docs":"Message Reply-To address","Flags":[1]},{"Name":"Recipient","Type":"string","Docs":"Message recipient name","Flags":[1]},{"Name":"RecipientAddress","Type":"string","Docs":"Message recipient address","Flags":[1]},{"Name":"Type","Type":"string","Docs":"Message type\n\n\tPossible values:\n\n\t:\"email\":\n\t:\"sms-gsm\":\n\t:\"sms-cdma\":\n\t:\"mms\":","Flags":[1]},{"Name":"Size","Type":"uint64","Docs":"Message size in bytes","Flags":[1]},{"Name":"Status","Type":"string","Docs":"Message reception status\n\n\tPossible values:\n\n\t:\"complete\":\n\t:\"fractioned\":\n\t:\"notification\":","Flags":[1]},{"Name":"Priority","Type":"boolean","Docs":"Message priority flag","Flags":[1]},{"Name":"Deleted","Type":"boolean","Docs":"Message deleted flag","Flags":[2]},{"Name":"Sent","Type":"boolean","Docs":"Message sent flag","Flags":[1]},{"Name":"Protected","Type":"boolean","Docs":"Message protected flag","Flags":[1]}]}]},{"FileName":"org.bluez.obex.MessageAccess.rst","Name":"BlueZ D-Bus OBEX MessageAccess API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX MessageAccess API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.MessageAccess1","ObjectPath":"[Session object path]","Methods":[{"Name":"SetFolder","ReturnType":"void","Args":[{"Type":"string","Name":"name"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Set working directory for current session.\n\n\tPossible name:\n\n\t\tDirectory name or '..[/dir]'.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"ListFolders","ReturnType":"array{dict}","Args":[{"Type":"dict","Name":"filter"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Returns a dictionary containing information about the current folder\n\tcontent.\n\n\tPossible filter:\n\n\t:uint16 Offset (default 0):\n\n\t\tOffset of the first item.\n\n\t:uint16 MaxCount (default 1024):\n\n\t\tMaximum number of items.\n\n\tPossible return:\n\n\t:string Name:\n\n\t\tFolder name\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"ListFilterFields","ReturnType":"array{string}","Args":[],"Errors":[],"Docs":"Return all available fields that can be used in **Fields** filter.\n\n\tPossible values:\n\n\t:\"subject\":\n\t:\"timestamp\":\n\t:\"sender\":\n\t:\"sender-address\":\n\t:\"recipient\":\n\t:\"recipient-address\":\n\t:\"type\":\n\t:\"size\":\n\t:\"status\":\n\t:\"text\":\n\t:\"attachment\":\n\t:\"priority\":\n\t:\"read\":\n\t:\"sent\":\n\t:\"protected\":\n\t:\"replyto\":\n\n\tPossible errors: None"},{"Name":"ListMessages","ReturnType":"array{object, dict}","Args":[{"Type":"string","Name":"folder"},{"Type":"dict","Name":"filter"}],"Errors":[],"Docs":"Returns an array containing the messages objects found in the given\n\tsubfolder of the current folder, or in the current folder if folder is\n\tempty.\n\n\tPossible Filters:\n\n\t:uint16 Offset (default 0):\n\n\t\tOffset of the first item.\n\n\tuint16 MaxCount (default 1024):\n\n\t\tMaximum number of items.\n\n\t:byte SubjectLength (default 256):\n\n\t\tMaximum length of the Subject property in the message.\n\n\t:array{string} Fields:\n\n\t\tMessage fields, default is all values.\n\n\t\tSee **ListFilterFields()** for possible values.\n\n\t:array{string} Types:\n\n\t\tFilter messages by type.\n\n\t\tPossible values:\n\n\t\t:\"sms\":\n\t\t:\"email\":\n\t\t:\"mms\":\n\n\t:string PeriodBegin:\n\n\t\tFilter messages by starting period.\n\n\t\tPossible values:\n\n\t\t\tDate in \"YYYYMMDDTHHMMSS\" format.\n\n\t:string PeriodEnd:\n\n\t\tFilter messages by ending period.\n\n\t\tPossible values:\n\n\t\t\tDate in \"YYYYMMDDTHHMMSS\" format.\n\n\t:boolean Read:\n\n\t\tFilter messages by read flag.\n\n\t\tPossible values:\n\n\t\t\tTrue for read or False for unread\n\n\t:string Recipient:\n\n\t\tFilter messages by recipient address.\n\n\t:string Sender:\n\n\t\tFilter messages by sender address.\n\n\t:boolean Priority:\n\n\t\tFilter messages by priority flag.\n\n\t\tPossible values:\n\n\t\t\tTrue for high priority or False for non-high priority.\n\n\tEach message is represented by an object path, which implements\n\t**org.bluez.obex.Message(5)** interface, followed by a dictionary\n\tof its properties."},{"Name":"PushMessage","ReturnType":"object, dict","Args":[{"Type":"string","Name":"sourcefile"},{"Type":"string","Name":"folder"},{"Type":"dict","Name":"args"}],"Errors":[],"Docs":"Transfers a message (in bMessage format) to the remote device.\n\n\tThe message is transferred either to the given subfolder of the current\n\tfolder, or to the current folder if folder is empty.\n\n\tPossible args: Transparent, Retry, Charset\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.ObjectPush.rst","Name":"BlueZ D-Bus OBEX ObjectPush API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX ObjectPush API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.ObjectPush1","ObjectPath":"[Session object path]","Methods":[{"Name":"SendFile","ReturnType":"object, dict","Args":[{"Type":"string","Name":"sourcefile"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Sends local file to the remote device.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"PullBusinessCard","ReturnType":"object, dict","Args":[{"Type":"string","Name":"targetfile"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Request the business card from a remote device and store it in the local\n\tfile.\n\n\tIf an empty target file is given, a name will be automatically\n\tgenerated for the temporary file.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"ExchangeBusinessCards","ReturnType":"object, dict","Args":[{"Type":"string","Name":"clientfile"},{"Type":"string","Name":"targetfile"}],"Errors":[],"Docs":"Push the client's business card to the remote device and then retrieve\n\tthe remote business card and store it in a local file.\n\n\tIf an empty target file is given, a name will be automatically\n\tgenerated for the temporary file.\n\n\tThe returned path represents the newly created transfer, which should\n\tbe used to find out if the content has been successfully transferred or\n\tif the operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.PhonebookAccess.rst","Name":"BlueZ D-Bus OBEX PhonebookAccess API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX PhonebookAccess API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.PhonebookAccess1","ObjectPath":"[Session object path]","Methods":[{"Name":"Select","ReturnType":"void","Args":[{"Type":"string","Name":"location"},{"Type":"string","Name":"phonebook"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Selects the phonebook object for other operations. Should be call before\n\tall the other operations.\n\n\tPossible location values:\n\n\t:\"int\", \"internal\" (default):\n\n\t\tStore in the Internal memory.\n\n\t:\"sim{#}\":\n\n\t\tStore in the sim number.\n\n\tPossible phonebook values:\n\n\t:\"pb\":\n\n\t\tStore as contact.\n\n\t:\"ich\":\n\n\t\tStore as incoming call.\n\n\t:\"och\":\n\n\t\tStore as outgoing call.\n\n\t:\"mch\":\n\n\t\tStore as missing call.\n\n\t:\"cch\":\n\n\t\tStore as a combination of incoming, outgoing and missing call.\n\n\t\"spd\":\n\n\t\tStore as speed dials entry ( only for \"internal\" )\n\n\t\"fav\":\n\n\t\tStore as favorites entry ( only for \"internal\" )\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"PullAll","ReturnType":"object, dict","Args":[{"Type":"string","Name":"targetfile"},{"Type":"dict","Name":"filters"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Returns the entire phonebook object from the PSE server in plain string\n\twith vcard format, and store it in a local file.\n\n\tIf an empty target file is given, a name will be automatically generated\n\tfor the temporary file.\n\n\tThe returned path represents the newly created transfer, which should\n\tbe used to find out if the content has been successfully transferred or\n\tif the operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible filters:\n\n\t:string Format:\n\n\t\tItems vcard format.\n\n\t\tPossible values:\n\n\t\t:\"vcard21\" (default):\n\t\t:\"vcard30\":\n\n\t:string Order:\n\n\t\tItems order.\n\n\t\tPossible values:\n\n\t\t:\"\":\n\t\t:\"indexed\":\n\t\t:\"alphanumeric\":\n\t\t:\"phonetic\":\n\n\t:uint16 Offset (default 0):\n\n\t\tOffset of the first item.\n\n\t:uint16 MaxCount (default 65535):\n\n\t\tMaximum number of items.\n\n\t:array{string} Fields (default all fields):\n\n\t\tItem vcard fields.\n\n\t\tSee **ListFilterFields()** for possible values.\n\n\t:array{string} FilterAll:\n\n\t\tFilter items by fields using AND logic, cannot be used\n\t\ttogether with **FilterAny**.\n\n\t\tSee **ListFilterFields()** for possible values.\n\n\t:array{string} FilterAny:\n\n\t\tFilter items by fields using OR logic, cannot be used together\n\t\twith **FilterAll**.\n\n\t\tSee **ListFilterFields()** for possible values.\n\n\t:bool ResetNewMissedCalls:\n\n\t\tReset new the missed calls items, shall only be used for folders\n\t\tmch and cch.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Forbidden:"},{"Name":"List","ReturnType":"array{string vcard, string name}","Args":[{"Type":"dict","Name":"filters"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Returns array of vcard-listing data where every entry consists of a\n\tpair of strings containing the vcard handle and the contact name.\n\tFor example:\n\n\t:\"1.vcf\": \"John\"\n\n\tPossible filters:\n\n\t:string Order:\n\n\t\tContact order.\n\n\t\tPossible values:\n\n\t\t:\"\":\n\t\t:\"indexed\":\n\t\t:\"alphanumeric\":\n\t\t:\"phonetic\":\n\n\t:uint16 Offset:\n\n\t\tStart offset.\n\n\t:uint16 MaxCount:\n\n\t\tMaximum number of contacts.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Forbidden:"},{"Name":"Pull","ReturnType":"object, dict","Args":[{"Type":"string","Name":"vcard"},{"Type":"string","Name":"targetfile"},{"Type":"dict","Name":"filters"}],"Errors":["org.bluez.obex.Error.InvalidArguments","org.bluez.obex.Error.Forbidden"],"Docs":"Retrieves the vcard in the current phonebook object and store it in a\n\tlocal file.\n\n\tIf an empty target file is given, a name will be automatically generated\n\tfor the temporary file.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible filters:\n\n\t:string Format:\n\n\t\tContact data format.\n\n\t\tPossible values:\n\n\t\t:\"\":\n\t\t:\"vcard21\":\n\t\t:\"vcard30\":\n\n\t:array{string} Fields:\n\n\t\tSee **ListFilterFields()** for possible values.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Forbidden:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"Search","ReturnType":"array{string vcard, string name}","Args":[{"Type":"string","Name":"field"},{"Type":"string","Name":"value"},{"Type":"dict","Name":"filters"}],"Errors":["org.bluez.obex.Error.InvalidArguments","org.bluez.obex.Error.Forbidden"],"Docs":"Searches for entries matching the given condition and return an array of\n\tvcard-listing data where every entry consists of a pair of strings\n\tcontaining the vcard handle and the contact name.\n\n\tPossible field values:\n\n\t\t:\"name\" (default):\n\n\t\t\tSearch by name.\n\n\t\t:\"number\":\n\n\t\t\tSearch by number.\n\n\t\t:\"sound\":\n\n\t\t\tSearch by sound.\n\n\tvalue: the string value to search for\n\n\tPossible filters:\n\n\t:string Order:\n\n\t\tContact order.\n\n\t\tPossible values:\n\n\t\t:\"\":\n\t\t:\"indexed\":\n\t\t:\"alphanumeric\":\n\t\t:\"phonetic\":\n\n\t:uint16 Offset:\n\n\t\tStart offset.\n\n\t:uint16 MaxCount:\n\n\t\tMaximum number of contacts.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Forbidden:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"GetSize","ReturnType":"uint16","Args":[],"Errors":["org.bluez.obex.Error.Forbidden"],"Docs":"Returns the number of entries in the selected phonebook object that are\n\tactually used (i.e. indexes that correspond to non-NULL entries).\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.Forbidden:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"UpdateVersion","ReturnType":"void","Args":[],"Errors":["org.bluez.obex.Error.NotSupported","org.bluez.obex.Error.Forbidden"],"Docs":"Attempts to update PrimaryCounter and SecondaryCounter.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.NotSupported:\n\t:org.bluez.obex.Error.Forbidden:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"ListFilterFields","ReturnType":"array{string}","Args":[],"Errors":[],"Docs":"Returns all Available fields that can be used in Fields filter.\n\n\tPossible return:\n\n\t:\"VERSION\":\n\t:\"FN\":\n\t:\"N\":\n\t:\"PHOTO\":\n\t:\"BDAY\":\n\t:\"ADR\":\n\t:\"LABEL\":\n\t:\"TEL\":\n\t:\"EMAIL\":\n\t:\"MAILER\":\n\t:\"TZ\":\n\t:\"GEO\":\n\t:\"TITLE\":\n\t:\"ROLE\":\n\t:\"LOGO\":\n\t:\"AGENT\":\n\t:\"ORG\":\n\t:\"NOTE\":\n\t:\"REV\":\n\t:\"SOUND\":\n\t:\"URL\":\n\t:\"UID\":\n\t:\"KEY\":\n\t:\"NICKNAME\":\n\t:\"CATEGORIES\":\n\t:\"PROID\":\n\t:\"CLASS\":\n\t:\"SORT-STRING\":\n\t:\"X-IRMC-CALL-DATETIME\":\n\t:\"X-BT-SPEEDDIALKEY\":\n\t:\"X-BT-UCI\":\n\t:\"X-BT-UID\":\n\t:\"BIT-{#}\":"}],"Signals":[],"Properties":[{"Name":"Folder","Type":"string","Docs":"Current folder.","Flags":[1]},{"Name":"DatabaseIdentifier","Type":"string","Docs":"128 bits persistent database identifier.\n\n\tPossible values:\n\n\t\t32-character hexadecimal such as\n\t\tA1A2A3A4B1B2C1C2D1D2E1E2E3E4E5E6","Flags":[1,5]},{"Name":"PrimaryCounter","Type":"string","Docs":"128 bits primary version counter.\n\n\tPossible values:\n\n\t\t32-character hexadecimal such as\n\t\tA1A2A3A4B1B2C1C2D1D2E1E2E3E4E5E6","Flags":[1,5]},{"Name":"SecondaryCounter","Type":"string","Docs":"128 bits secondary version counter.\n\n\tPossible values:\n\n\t\t32-character hexadecimal such as\n\t\tA1A2A3A4B1B2C1C2D1D2E1E2E3E4E5E6","Flags":[1,5]},{"Name":"FixedImageSize","Type":"bool","Docs":"Indicate support for fixed image size.\n\n\tPossible values:\n\n\t\tTrue if image is JPEG 300x300 pixels otherwise False.","Flags":[1,5]}]}]},{"FileName":"org.bluez.obex.Session.rst","Name":"BlueZ D-Bus OBEX Client API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX Client API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.Session1","ObjectPath":"/org/bluez/obex/server/session{#} or","Methods":[{"Name":"GetCapabilities","ReturnType":"string","Args":[],"Errors":[],"Docs":"Get remote device capabilities.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.NotSupported:"}],"Signals":[],"Properties":[{"Name":"Source","Type":"string","Docs":"Bluetooth adapter address","Flags":[1]},{"Name":"Destination","Type":"string","Docs":"Bluetooth device address","Flags":[1]},{"Name":"Channel","Type":"byte","Docs":"Bluetooth channel","Flags":[1]},{"Name":"Target","Type":"string","Docs":"Target UUID","Flags":[1]},{"Name":"Root","Type":"string","Docs":"Root path","Flags":[1]}]}]},{"FileName":"org.bluez.obex.Synchronization.rst","Name":"BlueZ D-Bus OBEX Synchronization API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX Synchronization API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.Synchronization1","ObjectPath":"[Session object path]","Methods":[{"Name":"SetLocation","ReturnType":"void","Args":[{"Type":"string","Name":"location"}],"Errors":[],"Docs":"Sets the phonebook object store location for other operations. Should be\n\tcalled before all the other operations.\n\n\tPossible location:\n\n\t:\"int\" ( \"internal\" which is default ):\n\n\t\tStore in the interval memory.\n\n\t:\"sim{#}\":\n\n\t\tStore in sim card number #.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"},{"Name":"GetPhonebook","ReturnType":"object, dict","Args":[{"Type":"string","Name":"targetfile"}],"Errors":["org.bluez.obex.Error.InvalidArguments"],"Docs":"Retrieves an entire Phonebook Object store from remote device, and\n\tstores it in a local file.\n\n\tIf an empty target file is given, a name will be automatically\n\tcalculated for the temporary file.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"PutPhonebook","ReturnType":"object, dict","Args":[{"Type":"string","Name":"sourcefile"}],"Errors":[],"Docs":"Sends an entire Phonebook Object store to remote device.\n\n\tThe returned path represents the newly created transfer, which should be\n\tused to find out if the content has been successfully transferred or if\n\tthe operation fails.\n\n\tThe properties of this transfer are also returned along with the object\n\tpath, to avoid a call to GetProperties, see\n\t**org.bluez.obex.Transfer(5)** for the possible list of properties.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.InvalidArguments:"}],"Signals":[],"Properties":[]}]},{"FileName":"org.bluez.obex.Transfer.rst","Name":"BlueZ D-Bus OBEX Transfer API documentation","Description":"","Api":[{"Title":"BlueZ D-Bus OBEX Transfer API documentation","Description":"","Service":"org.bluez.obex","Interface":"org.bluez.obex.Transfer1","ObjectPath":"[Session object path]/transfer{#}","Methods":[{"Name":"Cancel","ReturnType":"void","Args":[],"Errors":["org.bluez.obex.Error.NotAuthorized","org.bluez.obex.Error.InProgress"],"Docs":"Cancels the current transference.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.NotAuthorized:\n\t:org.bluez.obex.Error.InProgress:\n\t:org.bluez.obex.Error.Failed:"},{"Name":"Suspend","ReturnType":"void","Args":[],"Errors":["org.bluez.obex.Error.NotAuthorized","org.bluez.obex.Error.NotInProgress"],"Docs":"Suspends transference.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.NotAuthorized:\n\t:org.bluez.obex.Error.NotInProgress:\n\n\t\tIf transfer is still in with **Status** **\"queued\"**."},{"Name":"Resume","ReturnType":"void","Args":[],"Errors":["org.bluez.obex.Error.NotAuthorized"],"Docs":"Resumes transference previously suspended with use of **Suspend()**\n\tmethod.\n\n\tPossible errors:\n\n\t:org.bluez.obex.Error.NotAuthorized:\n\t:org.bluez.obex.Error.NotInProgress:"}],"Signals":[],"Properties":[{"Name":"Status","Type":"string","Docs":"Indicates the current status of the transfer.\n\n\tPossible values:\n\n\t:\"queued\":\n\t:\"active\":\n\t:\"suspended\":\n\t:\"complete\":\n\t:\"error\":","Flags":[1]},{"Name":"Session","Type":"object","Docs":"The object path of the session the transfer belongs to.","Flags":[1]},{"Name":"Name","Type":"string","Docs":"Name of the object being transferred.\n\n\tEither Name or Type or both will be present.","Flags":[1,5]},{"Name":"Type","Type":"string","Docs":"Type of the object transferred being transferred.\n\n\tEither Name or Type or both will be present.","Flags":[1,5]},{"Name":"Time","Type":"uint64","Docs":"Time of the object being transferred if this is provided by the remote\n\tparty.","Flags":[1,5]},{"Name":"Size","Type":"uint64","Docs":"Size of the object being transferred.\n\n\tIf the size is unknown, then this property will not be present.","Flags":[1,5]},{"Name":"Transferred","Type":"uint64","Docs":"Number of bytes transferred.\n\n\tFor transfers with **Status** set to **\"queued\"**, this value will not\n\tbe present.","Flags":[1,5]},{"Name":"Filename","Type":"string","Docs":"Complete name of the file being received or sent.\n\n\tFor incoming object push transaction, this will be the proposed default\n\tlocation and name. It can be overwritten by the **AuthorizePush()** in\n\t**org.bluez.obex.Agent(5)** and will be then updated accordingly.","Flags":[1,5]}]}]},{"FileName":"sap-api.txt","Name":"BlueZ D-Bus Sim Access API description","Description":"\n","Api":[{"Title":"Sim Access Profile hierarchy","Description":"","Service":"org.bluez","Interface":"org.bluez.SimAccess1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[{"Name":"Disconnect","ReturnType":"void","Args":[],"Errors":["org.bluez.Error.Failed","org.bluez.Error.Failed"],"Docs":"\t\t\tDisconnects SAP client from the server.\n\t\t\tPossible errors: org.bluez.Error.Failed\n"}],"Signals":[],"Properties":[{"Name":"Connected","Type":"boolean","Docs":"Indicates if SAP client is connected to the server.","Flags":[]}]}]},{"FileName":"thermometer-api.txt","Name":"BlueZ D-Bus Thermometer API description","Description":"\tSantiago Carot-Nemesio \u003csancane@gmail.com\u003e\n\n","Api":[{"Title":"Health Thermometer Manager hierarchy","Description":"","Service":"org.bluez","Interface":"org.bluez.ThermometerManager1","ObjectPath":"[variable prefix]/{hci0,hci1,...}","Methods":[{"Name":"RegisterWatcher","ReturnType":"","Args":[{"Type":"object","Name":"agent"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tRegisters a watcher to monitor scanned measurements.\n\t\t\tThis agent will be notified about final temperature\n\t\t\tmeasurements.\n\t\t\tPossible Errors: org.bluez.Error.InvalidArguments\n"},{"Name":"UnregisterWatcher","ReturnType":"","Args":[{"Type":"object","Name":"agent"}],"Errors":null,"Docs":"\t\t\tUnregisters a watcher.\n"},{"Name":"EnableIntermediateMeasurement","ReturnType":"","Args":[{"Type":"object","Name":"agent"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tEnables intermediate measurement notifications\n\t\t\tfor this agent. Intermediate measurements will\n\t\t\tbe enabled only for thermometers which support it.\n\t\t\tPossible Errors: org.bluez.Error.InvalidArguments\n"},{"Name":"DisableIntermediateMeasurement","ReturnType":"","Args":[{"Type":"object","Name":"agent"}],"Errors":["org.bluez.Error.InvalidArguments","org.bluez.Error.InvalidArguments"],"Docs":"\t\t\tDisables intermediate measurement notifications\n\t\t\tfor this agent. It will disable notifications in\n\t\t\tthermometers when the last agent removes the\n\t\t\twatcher for intermediate measurements.\n\t\t\tPossible Errors: org.bluez.Error.InvalidArguments\n\t\t\t\t\torg.bluez.Error.NotFound\n"}],"Signals":[],"Properties":[]},{"Title":"Health Thermometer Profile hierarchy","Description":"","Service":"org.bluez","Interface":"org.bluez.Thermometer1","ObjectPath":"[variable prefix]/{hci0,hci1,...}/dev_XX_XX_XX_XX_XX_XX","Methods":[],"Signals":[],"Properties":[{"Name":"Intermediate","Type":"boolean","Docs":"True if the thermometer supports intermediate\n\t\t\tmeasurement notifications.","Flags":[]},{"Name":"Interval","Type":"uint16","Docs":"(optional) The Measurement Interval defines the time (in\n\t\t\tseconds) between measurements. This interval is\n\t\t\tnot related to the intermediate measurements and\n\t\t\tmust be defined into a valid range. Setting it\n\t\t\tto zero means that no periodic measurements will\n\t\t\tbe taken.","Flags":[5]},{"Name":"Maximum","Type":"uint16","Docs":"(optional) Defines the maximum value allowed for the interval\n\t\t\tbetween periodic measurements.","Flags":[5]},{"Name":"Minimum","Type":"uint16","Docs":"(optional) Defines the minimum value allowed for the interval\n\t\t\tbetween periodic measurements.","Flags":[5]}]},{"Title":"Health Thermometer Watcher hierarchy","Description":"","Service":"unique name","Interface":"org.bluez.ThermometerWatcher1","ObjectPath":"freely definable","Methods":[{"Name":"MeasurementReceived","ReturnType":"void","Args":[{"Type":"dict","Name":"measurement"}],"Errors":null,"Docs":"\t\t\tThis callback gets called when a measurement has been\n\t\t\tscanned in the thermometer.\n\t\t\tMeasurement:\n\t\t\t\tint16 Exponent:\n\t\t\t\tint32 Mantissa:\n\t\t\t\t\tExponent and Mantissa values as\n\t\t\t\t\textracted from float value defined by\n\t\t\t\t\tIEEE-11073-20601.\n\t\t\t\t\tMeasurement value is calculated as\n\t\t\t\t\t(Mantissa) * (10^Exponent)\n\t\t\t\t\tFor special cases Exponent is\n\t\t\t\t\tset to 0 and Mantissa is set to\n\t\t\t\t\tone of following values:\n\t\t\t\t\t+(2^23 - 1)\tNaN (invalid or\n\t\t\t\t\t\t\tmissing data)\n\t\t\t\t\t-(2^23)\t\tNRes\n\t\t\t\t\t+(2^23 - 2)\t+Infinity\n\t\t\t\t\t-(2^23 - 2)\t-Infinity\n\t\t\t\tstring Unit:\n\t\t\t\t\tPossible values: \"celsius\" or\n\t\t\t\t\t\t\t\"fahrenheit\"\n\t\t\t\tuint64 Time (optional):\n\t\t\t\t\tTime of measurement, if\n\t\t\t\t\tsupported by device.\n\t\t\t\t\tExpressed in seconds since epoch.\n\t\t\t\tstring Type (optional):\n\t\t\t\t\tOnly present if measurement type\n\t\t\t\t\tis known.\n\t\t\t\t\tPossible values: \"armpit\", \"body\",\n\t\t\t\t\t\t\"ear\", \"finger\", \"intestines\",\n\t\t\t\t\t\t\"mouth\", \"rectum\", \"toe\",\n\t\t\t\t\t\t\"tympanum\"\n\t\t\t\tstring Measurement:\n\t\t\t\t\tPossible values: \"final\" or\n\t\t\t\t\t\t\t\"intermediate\"\n"}],"Signals":[],"Properties":[]}]}]}