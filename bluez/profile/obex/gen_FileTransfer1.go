// Code generated by go-bluetooth generator DO NOT EDIT.

package obex

import (
	"sync"

	"github.com/godbus/dbus/v5"
	"github.com/muka/go-bluetooth/bluez"
	"github.com/muka/go-bluetooth/props"
	"github.com/muka/go-bluetooth/util"
)

var FileTransfer1Interface = "org.bluez.obex.FileTransfer1"

// NewFileTransfer1 create a new instance of FileTransfer1
//
// Args:
// - objectPath: [Session object path]
func NewFileTransfer1(objectPath dbus.ObjectPath) (*FileTransfer1, error) {
	a := new(FileTransfer1)
	a.client = bluez.NewClient(
		&bluez.Config{
			Name:  "org.bluez.obex",
			Iface: FileTransfer1Interface,
			Path:  dbus.ObjectPath(objectPath),
			Bus:   bluez.SystemBus,
		},
	)
	a.Properties = new(FileTransfer1Properties)

	_, err := a.GetProperties()
	if err != nil {
		return nil, err
	}
	return a, nil
}

/*
FileTransfer1 BlueZ D-Bus OBEX FileTransfer API documentation
*/
type FileTransfer1 struct {
	client                 *bluez.Client
	propertiesSignal       chan *dbus.Signal
	objectManagerSignal    chan *dbus.Signal
	objectManager          *bluez.ObjectManager
	Properties             *FileTransfer1Properties
	watchPropertiesChannel chan *dbus.Signal
}

// FileTransfer1Properties contains the exposed properties of an interface
type FileTransfer1Properties struct {
	lock sync.RWMutex `dbus:"ignore"`
}

// Lock access to properties
func (p *FileTransfer1Properties) Lock() {
	p.lock.Lock()
}

// Unlock access to properties
func (p *FileTransfer1Properties) Unlock() {
	p.lock.Unlock()
}

// Close the connection
func (a *FileTransfer1) Close() {
	a.unregisterPropertiesSignal()
	a.client.Disconnect()
}

// Path return FileTransfer1 object path
func (a *FileTransfer1) Path() dbus.ObjectPath {
	return a.client.Config.Path
}

// Client return FileTransfer1 dbus client
func (a *FileTransfer1) Client() *bluez.Client {
	return a.client
}

// Interface return FileTransfer1 interface
func (a *FileTransfer1) Interface() string {
	return a.client.Config.Iface
}

// GetObjectManagerSignal return a channel for receiving updates from the ObjectManager
func (a *FileTransfer1) GetObjectManagerSignal() (chan *dbus.Signal, func(), error) {

	if a.objectManagerSignal == nil {
		if a.objectManager == nil {
			om, err := bluez.GetObjectManager()
			if err != nil {
				return nil, nil, err
			}
			a.objectManager = om
		}

		s, err := a.objectManager.Register()
		if err != nil {
			return nil, nil, err
		}
		a.objectManagerSignal = s
	}

	cancel := func() {
		if a.objectManagerSignal == nil {
			return
		}
		a.objectManagerSignal <- nil
		a.objectManager.Unregister(a.objectManagerSignal)
		a.objectManagerSignal = nil
	}

	return a.objectManagerSignal, cancel, nil
}

// ToMap convert a FileTransfer1Properties to map
func (a *FileTransfer1Properties) ToMap() (map[string]interface{}, error) {
	return props.ToMap(a), nil
}

// FromMap convert a map to an FileTransfer1Properties
func (a *FileTransfer1Properties) FromMap(props map[string]interface{}) (*FileTransfer1Properties, error) {
	props1 := map[string]dbus.Variant{}
	for k, val := range props {
		props1[k] = dbus.MakeVariant(val)
	}
	return a.FromDBusMap(props1)
}

// FromDBusMap convert a map to an FileTransfer1Properties
func (a *FileTransfer1Properties) FromDBusMap(props map[string]dbus.Variant) (*FileTransfer1Properties, error) {
	s := new(FileTransfer1Properties)
	err := util.MapToStruct(s, props)
	return s, err
}

// ToProps return the properties interface
func (a *FileTransfer1) ToProps() bluez.Properties {
	return a.Properties
}

// GetWatchPropertiesChannel return the dbus channel to receive properties interface
func (a *FileTransfer1) GetWatchPropertiesChannel() chan *dbus.Signal {
	return a.watchPropertiesChannel
}

// SetWatchPropertiesChannel set the dbus channel to receive properties interface
func (a *FileTransfer1) SetWatchPropertiesChannel(c chan *dbus.Signal) {
	a.watchPropertiesChannel = c
}

// GetProperties load all available properties
func (a *FileTransfer1) GetProperties() (*FileTransfer1Properties, error) {
	a.Properties.Lock()
	err := a.client.GetProperties(a.Properties)
	a.Properties.Unlock()
	return a.Properties, err
}

// SetProperty set a property
func (a *FileTransfer1) SetProperty(name string, value interface{}) error {
	return a.client.SetProperty(name, value)
}

// GetProperty get a property
func (a *FileTransfer1) GetProperty(name string) (dbus.Variant, error) {
	return a.client.GetProperty(name)
}

// GetPropertiesSignal return a channel for receiving udpdates on property changes
func (a *FileTransfer1) GetPropertiesSignal() (chan *dbus.Signal, error) {

	if a.propertiesSignal == nil {
		s, err := a.client.Register(a.client.Config.Path, bluez.PropertiesInterface)
		if err != nil {
			return nil, err
		}
		a.propertiesSignal = s
	}

	return a.propertiesSignal, nil
}

// Unregister for changes signalling
func (a *FileTransfer1) unregisterPropertiesSignal() {
	if a.propertiesSignal != nil {
		a.propertiesSignal <- nil
		a.propertiesSignal = nil
	}
}

// WatchProperties updates on property changes
func (a *FileTransfer1) WatchProperties() (chan *bluez.PropertyChanged, error) {
	return bluez.WatchProperties(a)
}

func (a *FileTransfer1) UnwatchProperties(ch chan *bluez.PropertyChanged) error {
	return bluez.UnwatchProperties(a, ch)
}

/*
ChangeFolder Changes the current folder of the remote device.

	Possible errors:

	:org.bluez.obex.Error.InvalidArguments:
	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) ChangeFolder(folder string) error {
	return a.client.Call("ChangeFolder", 0, folder).Store()
}

/*
CreateFolder Creates a new folder in the remote device.

	Possible errors:

	:org.bluez.obex.Error.InvalidArguments:
	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) CreateFolder(folder string) error {
	return a.client.Call("CreateFolder", 0, folder).Store()
}

/*
ListFolder Returns a dictionary containing information about the current folder

	content.

	Possible return values:

	:string Name:

		Object name in UTF-8 format.

	:string Type:

		Either "folder" or "file".

	:uint64 Size:

		Object size or number of items in folder.

	:string Permission:

		Group, owner and other permission.

	:uint64 Modified:

		Last change.

	:uint64 Accessed:

		Last access.

	:uint64 Created:

		Creation date.

	Possible errors:

	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) ListFolder() ([]map[string]interface{}, error) {
	val0 := []map[string]interface{}{}
	err := a.client.Call("ListFolder", 0).Store(&val0)
	return val0, err
}

/*
GetFile Copies the contents of the source file (from remote device) to the

	target file (on local filesystem).

	If an empty target file is given, a name will be automatically generated
	for the temporary file.

	The returned path represents the newly created transfer, which should be
	used to find out if the content has been successfully transferred or
	if the operation fails.

	The properties of this transfer are also returned along with the object
	path, to avoid a call to GetProperties, see
	**org.bluez.obex.Transfer(5)** for the possible list of properties.

	Possible errors:

	:org.bluez.obex.Error.InvalidArguments:
	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) GetFile(targetfile string, sourcefile string) (dbus.ObjectPath, map[string]interface{}, error) {
	var val0 dbus.ObjectPath
	var val1 map[string]interface{}
	err := a.client.Call("GetFile", 0, targetfile, sourcefile).Store(&val0, &val1)
	return val0, val1, err
}

/*
PutFile Copies the contents of the source file (from local filesystem) to the

	target file (on remote device).

	The returned path represents the newly created transfer, which should be
	used to find out if the content has been successfully transferred or if
	the operation fails.

	The properties of this transfer are also returned along with the object
	path, to avoid a call to GetProperties, see
	**org.bluez.obex.Transfer(5)** for the possible list of properties.

	Possible errors:

	:org.bluez.obex.Error.InvalidArguments:
	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) PutFile(sourcefile string, targetfile string) (dbus.ObjectPath, map[string]interface{}, error) {
	var val0 dbus.ObjectPath
	var val1 map[string]interface{}
	err := a.client.Call("PutFile", 0, sourcefile, targetfile).Store(&val0, &val1)
	return val0, val1, err
}

/*
CopyFile Copies the contents from source file to target file on the remote

	device.

	Possible errors:

	:org.bluez.obex.Error.InvalidArguments:
	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) CopyFile(sourcefile string, targetfile string) error {
	return a.client.Call("CopyFile", 0, sourcefile, targetfile).Store()
}

/*
MoveFile Moves a file within the remote device from source file to the target

	file.

	Possible errors:

	;org.bluez.obex.Error.InvalidArguments:
	:org.bluez.obex.Error.Failed:
*/
func (a *FileTransfer1) MoveFile(sourcefile string, targetfile string) error {
	return a.client.Call("MoveFile", 0, sourcefile, targetfile).Store()
}

/*
Delete Deletes the specified file/folder.

	Possible errors:

	:org.bluez.obex.Error.InvalidArguments:
*/
func (a *FileTransfer1) Delete(file string) error {
	return a.client.Call("Delete", 0, file).Store()
}
