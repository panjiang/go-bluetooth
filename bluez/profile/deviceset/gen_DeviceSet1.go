// Code generated by go-bluetooth generator DO NOT EDIT.

package deviceset

import (
	"sync"

	"github.com/godbus/dbus/v5"
	"github.com/muka/go-bluetooth/bluez"
	"github.com/muka/go-bluetooth/props"
	"github.com/muka/go-bluetooth/util"
)

var DeviceSet1Interface = "org.bluez.DeviceSet1"

// NewDeviceSet1 create a new instance of DeviceSet1
//
// Args:
// - objectPath: [variable prefix]/{hci0,hci1,...}/set_{sirk}
func NewDeviceSet1(objectPath dbus.ObjectPath) (*DeviceSet1, error) {
	a := new(DeviceSet1)
	a.client = bluez.NewClient(
		&bluez.Config{
			Name:  "org.bluez",
			Iface: DeviceSet1Interface,
			Path:  dbus.ObjectPath(objectPath),
			Bus:   bluez.SystemBus,
		},
	)
	a.Properties = new(DeviceSet1Properties)

	_, err := a.GetProperties()
	if err != nil {
		return nil, err
	}
	return a, nil
}

/*
DeviceSet1 BlueZ D-Bus DeviceSet API documentation
*/
type DeviceSet1 struct {
	client                 *bluez.Client
	propertiesSignal       chan *dbus.Signal
	objectManagerSignal    chan *dbus.Signal
	objectManager          *bluez.ObjectManager
	Properties             *DeviceSet1Properties
	watchPropertiesChannel chan *dbus.Signal
}

// DeviceSet1Properties contains the exposed properties of an interface
type DeviceSet1Properties struct {
	lock sync.RWMutex `dbus:"ignore"`

	/*
		Adapter The object path of the adapter the set belongs to.
	*/
	Adapter dbus.ObjectPath

	/*
		AutoConnect Indicates if the **devices** members of the set shall be automatically
		connected once any of its members is connected.
	*/
	AutoConnect bool

	/*
		Devices List of devices objects that are members of the set.
	*/
	Devices []dbus.ObjectPath

	/*
		Size Set members size.
	*/
	Size byte
}

// Lock access to properties
func (p *DeviceSet1Properties) Lock() {
	p.lock.Lock()
}

// Unlock access to properties
func (p *DeviceSet1Properties) Unlock() {
	p.lock.Unlock()
}

// GetAdapter get Adapter value
func (a *DeviceSet1) GetAdapter() (dbus.ObjectPath, error) {
	v, err := a.GetProperty("Adapter")
	if err != nil {
		return dbus.ObjectPath(""), err
	}
	return v.Value().(dbus.ObjectPath), nil
}

// SetAutoConnect set AutoConnect value
func (a *DeviceSet1) SetAutoConnect(v bool) error {
	return a.SetProperty("AutoConnect", v)
}

// GetAutoConnect get AutoConnect value
func (a *DeviceSet1) GetAutoConnect() (bool, error) {
	v, err := a.GetProperty("AutoConnect")
	if err != nil {
		return false, err
	}
	return v.Value().(bool), nil
}

// SetDevices set Devices value
func (a *DeviceSet1) SetDevices(v []dbus.ObjectPath) error {
	return a.SetProperty("Devices", v)
}

// GetDevices get Devices value
func (a *DeviceSet1) GetDevices() ([]dbus.ObjectPath, error) {
	v, err := a.GetProperty("Devices")
	if err != nil {
		return []dbus.ObjectPath{}, err
	}
	return v.Value().([]dbus.ObjectPath), nil
}

// GetSize get Size value
func (a *DeviceSet1) GetSize() (byte, error) {
	v, err := a.GetProperty("Size")
	if err != nil {
		return byte(0), err
	}
	return v.Value().(byte), nil
}

// Close the connection
func (a *DeviceSet1) Close() {
	a.unregisterPropertiesSignal()
	a.client.Disconnect()
}

// Path return DeviceSet1 object path
func (a *DeviceSet1) Path() dbus.ObjectPath {
	return a.client.Config.Path
}

// Client return DeviceSet1 dbus client
func (a *DeviceSet1) Client() *bluez.Client {
	return a.client
}

// Interface return DeviceSet1 interface
func (a *DeviceSet1) Interface() string {
	return a.client.Config.Iface
}

// GetObjectManagerSignal return a channel for receiving updates from the ObjectManager
func (a *DeviceSet1) GetObjectManagerSignal() (chan *dbus.Signal, func(), error) {

	if a.objectManagerSignal == nil {
		if a.objectManager == nil {
			om, err := bluez.GetObjectManager()
			if err != nil {
				return nil, nil, err
			}
			a.objectManager = om
		}

		s, err := a.objectManager.Register()
		if err != nil {
			return nil, nil, err
		}
		a.objectManagerSignal = s
	}

	cancel := func() {
		if a.objectManagerSignal == nil {
			return
		}
		a.objectManagerSignal <- nil
		a.objectManager.Unregister(a.objectManagerSignal)
		a.objectManagerSignal = nil
	}

	return a.objectManagerSignal, cancel, nil
}

// ToMap convert a DeviceSet1Properties to map
func (a *DeviceSet1Properties) ToMap() (map[string]interface{}, error) {
	return props.ToMap(a), nil
}

// FromMap convert a map to an DeviceSet1Properties
func (a *DeviceSet1Properties) FromMap(props map[string]interface{}) (*DeviceSet1Properties, error) {
	props1 := map[string]dbus.Variant{}
	for k, val := range props {
		props1[k] = dbus.MakeVariant(val)
	}
	return a.FromDBusMap(props1)
}

// FromDBusMap convert a map to an DeviceSet1Properties
func (a *DeviceSet1Properties) FromDBusMap(props map[string]dbus.Variant) (*DeviceSet1Properties, error) {
	s := new(DeviceSet1Properties)
	err := util.MapToStruct(s, props)
	return s, err
}

// ToProps return the properties interface
func (a *DeviceSet1) ToProps() bluez.Properties {
	return a.Properties
}

// GetWatchPropertiesChannel return the dbus channel to receive properties interface
func (a *DeviceSet1) GetWatchPropertiesChannel() chan *dbus.Signal {
	return a.watchPropertiesChannel
}

// SetWatchPropertiesChannel set the dbus channel to receive properties interface
func (a *DeviceSet1) SetWatchPropertiesChannel(c chan *dbus.Signal) {
	a.watchPropertiesChannel = c
}

// GetProperties load all available properties
func (a *DeviceSet1) GetProperties() (*DeviceSet1Properties, error) {
	a.Properties.Lock()
	err := a.client.GetProperties(a.Properties)
	a.Properties.Unlock()
	return a.Properties, err
}

// SetProperty set a property
func (a *DeviceSet1) SetProperty(name string, value interface{}) error {
	return a.client.SetProperty(name, value)
}

// GetProperty get a property
func (a *DeviceSet1) GetProperty(name string) (dbus.Variant, error) {
	return a.client.GetProperty(name)
}

// GetPropertiesSignal return a channel for receiving udpdates on property changes
func (a *DeviceSet1) GetPropertiesSignal() (chan *dbus.Signal, error) {

	if a.propertiesSignal == nil {
		s, err := a.client.Register(a.client.Config.Path, bluez.PropertiesInterface)
		if err != nil {
			return nil, err
		}
		a.propertiesSignal = s
	}

	return a.propertiesSignal, nil
}

// Unregister for changes signalling
func (a *DeviceSet1) unregisterPropertiesSignal() {
	if a.propertiesSignal != nil {
		a.propertiesSignal <- nil
		a.propertiesSignal = nil
	}
}

// WatchProperties updates on property changes
func (a *DeviceSet1) WatchProperties() (chan *bluez.PropertyChanged, error) {
	return bluez.WatchProperties(a)
}

func (a *DeviceSet1) UnwatchProperties(ch chan *bluez.PropertyChanged) error {
	return bluez.UnwatchProperties(a, ch)
}

/*
Connect Connects all **devices** members of the set, each member is

	connected in sequence as they were added/loaded following the
	same proceedure as described in **Device1.Connect**.

	Possible errors:

	:org.bluez.Error.NotReady:
	:org.bluez.Error.Failed:
	:org.bluez.Error.InProgress:
	:org.bluez.Error.AlreadyConnected:
*/
func (a *DeviceSet1) Connect() error {
	return a.client.Call("Connect", 0).Store()
}

/*
Disconnect Disconnects all **devices** members of the set, each member is

	disconnected in sequence as they were connected following the
	same proceedure as described in **Device1.Disconnect**.

	Possible errors:
*/
func (a *DeviceSet1) Disconnect() error {
	return a.client.Call("Disconnect", 0).Store()
}
